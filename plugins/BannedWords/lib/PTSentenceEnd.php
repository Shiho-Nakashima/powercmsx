<?php

class PTSentenceEnd {

    public $app     = null;
    public $plugin  = null;
    public $cabocha = null;
    public $mecab   = null;
    public $allow_end_nominal = false;
    public $ambiguous = false;
    public $remove_final_particle = false;
    public $convert_ends = null;
    public $maybe = false;
    public $intentions = [];

    const PT_CHECK_LEN = 40;

    const PT_CONTINUOUS_MAP = [
      'ア' => 'い',
      'カ' => 'き',
      'ガ' => 'ぎ',
      'サ' => 'し',
      'ザ' => 'じ',
      'タ' => 'ち',
      'ダ' => 'ぢ',
      'ナ' => 'に',
      'ハ' => 'ひ',
      'バ' => 'び',
      'マ' => 'み',
      'ヤ' => 'い',
      'ラ' => 'り',
      'ワ' => 'い',
    ];

    const PT_INSTRUCTION_MAP = [
      'ア' => 'い',
      'カ' => 'い',
      'ガ' => 'い',
      'サ' => 'し',
      'ザ' => 'じ',
      'タ' => 'っ',
      'ダ' => 'っ',
      'ナ' => 'ん',
      'ハ' => 'ん',
      'バ' => 'ん',
      'マ' => 'ん',
      'ヤ' => 'い',
      'ラ' => 'っ',
      'ワ' => 'っ',
    ];

    const PT_CHANGE_SOUND_MAP = [
      'ア' => 'お',
      'カ' => 'こ',
      'ガ' => 'ご',
      'サ' => 'そ',
      'ザ' => 'ぞ',
      'タ' => 'と',
      'ダ' => 'ど',
      'ナ' => 'の',
      'ハ' => 'ほ',
      'バ' => 'ぼ',
      'マ' => 'も',
      'ヤ' => 'よ',
      'ラ' => 'ろ',
      'ワ' => 'お',
    ];

    const PT_GYOU_MAP = [
      'ア' => '/[あいうえお]{1}/u',
      'カ' => '/[かきくけこ]{1}/u',
      'ガ' => '/[がぎぐげご]{1}/u',
      'サ' => '/[さしすせそ]{1}/u',
      'ザ' => '/[ざじずぜぞ]{1}/u',
      'タ' => '/[たちつてと]{1}/u',
      'ダ' => '/[だぢづでど]{1}/u',
      'ナ' => '/[なにぬねの]{1}/u',
      'ハ' => '/[はひふへほ]{1}/u',
      'バ' => '/[ばびぶべぼ]{1}/u',
      'マ' => '/[まみむめも]{1}/u',
      'ヤ' => '/[やいゆえよ]{1}/u',
      'ラ' => '/[らりるれろ]{1}/u',
      'ワ' => '/[わいうえを]{1}/u',
    ];

    const PT_INTENTIONS = [ // TODO::表記ゆれの考慮
      '僕', '私', '彼', '彼ら', '様', '殿', '彼女', '彼女ら', '達', 'たち', '員', '人', '長', '係', 'わたし',
      'ほう', '方', '雨', '雪', '雹', 'みぞれ', '霙', '晴天', '大統領', '首相', '大臣', '我々', 'われわれ',
      '照明', '電気', 'あかり', '電灯', '動物', '生物', '鳥', '月', '太陽', '僕ら', '僕等', '僕たち', '俺', '俺ら',
      '俺たち', 'オレたち', '俺達', '私たち', 'わたしたち', '台風', '地震', 'ハリケーン', '気圧の谷', '低気圧',
      '高気圧', '黄砂', 'ウイルス', 'ウィルス', '波', '感', '球', 'ボール', '雰囲気', '魚', '生き物',
    ];

    const PERSONAL_PRONOUN_1ST = [
      '僕', '私', '僕ら', '僕等', '僕たち', '俺', '俺ら', 'わたし', '我ら', '俺たち', 'オレたち', '俺達','私たち',
      'わたしたち', '私達', '我々', 'われわれ',
    ];

    const PT_NO_INTENTIONS = [
      'あなた', 'あなた達', 'あなたたち', 'あなたがた', 'あなた方', '君たち', '君達', 'お前', 'お前達', 'お前たち',
      'おまえ', 'おまえ達', 'おまえら', 'キミ', 'キミら', 'キミ達', 'お前ら', '貴方', '貴方達', '貴方がた',
    ];

    const PT_POST_TITLES = [
      '君', 'くん', 'さん', '様', '先生', '教授', '社長', '部長', '課長', '係長', '選手', '先輩', '常務', '専務',
      // '氏'は少し性格が異なる
    ];

    const PT_ANIMALS = [
      'イヌ', 'ウシ', 'ウマ', 'オス', 'カバ', 'クマ', 'サイ', 'サル', 'シカ', 'ゾウ', 'トド', 'トラ', 'ヌー', 'ネコ', 'バク',
      'ヒト', 'ヒヒ', 'ブタ', 'ホモ', 'メス', 'ヤギ', 'ラバ', 'ラマ', 'リス', 'ロバ', 'アシカ', 'イタチ', 'イルカ', 'ウサギ', 'オカピ',
      'オルカ', 'ガゼル', 'キツネ', 'キリン', 'クジラ', 'ゴリラ', 'シャチ', 'ジャマ', 'タヌキ', 'ネズミ', 'ノヤギ', 'パサン', 'パンダ',
      'ヒグマ', 'ヒツジ', 'ヒョウ', 'ボノボ', 'マカク', 'ムース', 'モグラ', 'ヤマネ', 'ラクダ', 'ラッコ', 'リャマ', 'アイアイ', 'アザラシ',
      'アリクイ', 'アルパカ', 'イエイヌ', 'イエネコ', 'イッカク', 'イノシシ', 'インパラ', 'エゾリス', 'オオカミ', 'カピバラ', 'カラカル', 'カワウソ',
      'キタリス', 'キヌザル', 'クロサイ', 'コウモリ', 'コクジラ', 'コヨーテ', 'サーバル', 'シマウマ', 'シマリス', 'シロクマ', 'シロサイ', 'ジネズミ',
      'ジャガー', 'ジュゴン', 'スカンク', 'セイウチ', 'チンチラ', 'チーター', 'ツチブタ', 'トナカイ', 'ノウサギ', 'ハイエナ', 'ハクジラ', 'バイソン',
      'ビーバー', 'ピューマ', 'ヘラジカ', 'ベルーガ', 'マイルカ', 'ムササビ', 'モモンガ', 'ヤマネコ', 'ライオン', 'リカオン', 'リスザル', 'レミング',
      'ワラビー', 'ワラルー', 'アカギツネ', 'アカネズミ', 'アジアゾウ', 'アナウサギ', 'アライグマ', 'アルマジロ', 'ヴィクーニャ', 'インドゾウ', 'ウンピョウ',
      'オグロヌー', 'オセロット', 'オットセイ', 'オナガザル', 'オポッサム', 'オマキザル', 'カモノハシ', 'カンガルー', 'キタキツネ', 'キツネザル', 'キンシコウ',
      'クマネズミ', 'コククジラ', 'コビトカバ', 'シロイルカ', 'ジャッカル', 'セミクジラ', 'テナガザル', 'テングザル', 'ドブネズミ', 'ナキウサギ', 'ナマケモノ',
      'ナンバット', 'ニホンザル', 'ニホンジカ', 'ニホンリス', 'ヌートリア', 'ハクビシン', 'ハムスター', 'ハリネズミ', 'ハリモグラ', 'ビクーニャ', 'フェネック',
      'フクロネコ', 'マナティー', 'マレーバク', 'マングース', 'マントヒヒ', 'マンドリル', 'マーモット', 'メガネザル', 'モルモット', 'ヤマアラシ', 'ユキウサギ',
      'ユキヒョウ', 'ローラシア', 'アイベックス', 'アカワラルー', 'アズマモグラ', 'アフリカゾウ', 'イエコウモリ', 'イボイノシシ', 'イワシクジラ', 'オオアリクイ',
      'カツオクジラ', 'キヌゲネズミ', 'クロワラルー', 'コウベモグラ', 'ザトウクジラ', 'シシバナザル', 'シマスカンク', 'ショウジョウ', 'ジャコウネコ', 'チンパンジー',
      'ツキノワグマ', 'トガリネズミ', 'ナガスクジラ', 'ハツカネズミ', 'ヒガシゴリラ', 'ヒナコウモリ', 'ビスカッチャ', 'ビスカーチャ', 'ビッグホーン', 'フクロネズミ', 
      'フクロモグラ', 'ブチハイエナ', 'ヘラコウモリ', 'ホンドギツネ', 'マーモセット', 'ミンククジラ', 'アカカンガルー', 'アブラコウモリ', 'アンデスウサギ',
      'ウッドチャック', 'オオカンガルー', 'オランウータン', 'オーストラリア', 'キタオットセイ', 'キタナキウサギ', 'クロキツネザル', 'コイワシクジラ', 'コビレゴンドウ',
      'コモンリスザル', 'ゴマフアザラシ', 'ゴンドウクジラ', 'チスイコウモリ', 'テンジクネズミ', 'トムソンガゼル', 'ナミハリネズミ', 'ニホンノウサギ', 'ニホンモモンガ',
      'ハンドウイルカ', 'バンディクート', 'バンドウイルカ', 'ヒトコブラクダ', 'フクロアリクイ', 'フサオマキザル', 'フタコブラクダ', 'ホッキョクグマ', 'ホンドモモンガ',
      'マッコウクジラ', 'レッサーパンダ', 'ワオキツネザル', 'アカクビワラビー', 'アメリカバイソン', 'アメリカビーバー', 'コビトキツネザル', 'サバンナシマウマ',
      'シロテテナガザル', 'シロナガスクジラ', 'ゼニガタアザラシ', 'タイリクオオカミ', 'タスマニアデビル', 'ナミチンパンジー', 'ネズミキツネザル', 'ハイイロオオカミ',
      'ヒメキヌゲネズミ', 'フェネックギツネ', 'プレーリードッグ', 'ホモ・サピエンス', 'アマミノクロウサギ', 'アメリカマナティー', 'アメリカヤマアラシ', 'アルプスマーモット',
      'エジプトマングース', 'キンイロジャッカル', 'ゴールデンモンキー', 'シリアンハムスター', 'ジャイアントパンダ', 'ナミチスイコウモリ', 'ノルウェーレミング',
      'ハイイロカンガルー', 'フタユビナマケモノ', 'マレージャコウネコ', 'ムツオビアルマジロ', 'ユーラシアカワウソ', 'カリフォルニアアシカ', 'ゴールデンハムスター',
      'シントウトガリネズミ', 'ピグミーチンパンジー', 'ピグミーマーモセット', 'フィリピンメガネザル', 'ヨーロッパハリネズミ','オグロプレーリードッグ', 'ボルネオオランウータン',
      'ミミナガバンディクート', 'ジャンガリアンハムスター', 'ピグミーネズミキツネザル', 'アフリカタテガミヤマアラシ', '虎', '熊', '鹿', '猿', '鯨'
    ];

    const PT_FISHES = [
      'プレコ', 'アユ', 'アイカジカ', 'アイゴ', 'アイザメ', 'アイコバンハゼ', 'アイスポットシクリッド', 'アイナメ', 'アイブリ',
      'ニホンウナギ', 'アオイソハゼ', 'アオウオ', 'アオギス', 'アオギハゼ', 'アオサハギ', 'アオザメ', 'アオスジスズメダイ', 'アオスジテンジクダイ',
      'アオダイ', 'アオタテジマチョウチョウウオ', 'アオタナゴ', 'アオチビキ', 'ブリ', 'アオノメハタ', 'アオバスズメダイ', 'アオハタ', 'アオバダイ',
      'アオハチハゼ', 'アオハナテンジクダイ', 'アオバラヨシノボリ', 'アオビクニン', 'ヨシキリザメ', 'アオブダイ', 'キュウセン', 'アオミシマ', 'アオメエソ',
      'アオヤガラ', 'アカアジ', 'アカアマダイ', 'アカイサキ', 'アカイソハゼ', 'スミツキカノコ', 'アカウオ', 'アコウダイ', 'タイセイヨウアカウオ',
      'アラスカメヌケ', 'シワイカナゴ', 'アカエイ', 'イカ', 'サンゴアイゴ', 'ヒメアイゴ', 'アカエソ', 'アオビシマハゼ', 'アカオビハナダイ', 'アカオビベラ',
      'アカカサゴ', 'アカカマス', 'アカガレイ', 'キンメダイ', 'アカギンザメ', 'アカククリ', 'アカクジラウオダマシ', 'アカグツ', 'アカゴチ',
      'アカザ', 'アカササノハベラ', 'アガシズズドワーフシクリッド', 'アカシタビラメ', 'アカシュモクザメ', 'スジアラ', 'スジアラ', 'アカスジウミタケハゼ', 'アカタチ',
      'アカタナゴ', 'アカタマガシラ', 'アカチョッキクジラウオ', 'アカツキハギ', 'アカテンコバンハゼ', 'アカテンモチノオウオ', 'アカトラギス', 'タマガシラ', 'アカナマダ',
      'アカネキンチャクダイ', 'アカネダルマオコゼ', 'アカネダルマハゼ', 'アカネハゼ', 'アカネハナゴイ', 'アカハゼ', 'アカハタ', 'アカハタモドキ', 'アカハチハゼ',
      'ウスメバル', 'アカハナ', 'カンパチ', 'ウグイ', 'アカハラヤッコ', 'アカヒメジ', 'アカヒレ', 'アカヒレタビラ', 'アカヒレハダカハゼ',
      'アカフジテンジクダイ', 'アカブダイ', 'キュウセン', 'アカボウズハゼ', 'アカホシイソハゼ', 'アカホシキツネベラ', 'アカマダラハタ', 'アカマツカサ', 'アカエイ',
      'アカマンボウ', 'アカムツ', 'アカメ', 'アカメハゼ', 'アカメバル', 'アカメフグ', 'アカモンガラ', 'アカヤガラ', 'アカントーデス',
      'サケ', 'アキレスタング', 'アクモニスティオン', 'マジリアイゴ', 'アケボノチョウチョウウオ', 'アケボノハゼ', 'アゴアマダイ', 'アコウダイ', 'アコウダイ',
      'ツマグロハタンポ', 'アゴハゼ', 'アゴハタ', 'アサドスズメダイ', 'アサバガレイ', 'アザハタ', 'アサバホラアナゴ', 'アサヒアナハゼ', 'アザミカワハギ',
      'アジ', 'アジアアロワナ', 'アジアコショウダイ', 'アシシロハゼ', 'アジメドジョウ', 'アシロ', 'アズキハタ', 'アストロノータス', 'アスピドリンクス',
      'アズマガレイ', 'アズマハナダイ', 'アセウツボ', 'アツクチスズメダイ', 'アッシュメドウズキリフィッシュ', 'アツモリウオ', 'アデイトベラ', 'アデオオモンハゼ', 'アデヤッコ',
      'アテレアスピス', 'アトクギス', 'アトヒキテンジクダイダマシ', 'タイセイヨウサケ', 'アトランティックスペードフィッシュ', 'アナゴ', 'アナハゼ', 'ストライプドヘッドスタンダー', 'アバ',
      'アバチャン', 'アパッチ', 'アピストグラマ', 'アブオコゼ', 'アブラガレイ', 'アイナメ', 'アブラツノザメ', 'アブラソコムツ', 'アブラツノザメ',
      'アブラハヤ', 'アブラヒガイ', 'アブラボウズ', 'アブラボテ', 'アイナメ', 'アブラヤッコ', 'アフリカンシクリッド', 'アフリカンパイクカラシン', 'アフリカンランブアイ',
      'アベニーパファー', 'アベハゼ', 'クロサギ', 'アマクサヨウジ', 'アマクチビ', 'サツキマス', 'アオミシマ', 'ワカサギ', 'アマシイラ',
      'アマダイ', 'アカアマダイ', 'シロアマダイ', 'キアマダイ', 'アマミイシモチ', 'アマミウシノシタ', 'アマミウマヅラハギ', 'アマミスズメダイ', 'アマミハナダイ',
      'アマミフエフキ', 'アマミホシゾラフグ', 'アオミシマ', 'アミアカルヴァ', 'アミアイゴ', 'アミアカルヴァ', 'アミウツボ', 'アミキカイウツボ', 'アミキリ',
      'アミチョウチョウウオ', 'アミフエフキ', 'アミメウナギ', 'アミメチョウチョウウオ', 'アミメハギ', 'アミメフエダイ', 'アミメブダイ', 'アミメベンケイハゼ', 'アミモンガラ',
      'アムールイトウ', 'ビワマス', 'アメマス', 'アメリカナマズ', 'ヘラチョウザメ', 'アメリカンシクリッド', 'アメリカンフラッグフィッシュ', 'アヤアナハゼ', 'アヤコショウダイ',
      'アヤトビウオ', 'アヤヘビギンポ', 'アヤメエビス', 'アヤメカサゴ', 'アヤヨシノボリ', 'アユ', 'アユカケ', 'アユモドキ', 'アラ',
      'クエ', 'アライソコケギンポ', 'アライソハタ', 'カサゴ', 'フサカサゴ', 'アラスカキジ', 'アラハダカ', 'ピラルクー', 'アラメガレイ',
      'アラメギンメ', 'アラメヌケ', 'アユカケ', 'アランダスピス', 'アリアケギバチ', 'アリアケアカエイ', 'アリアケシラウオ', 'アリアケスジシマドジョウ', 'アリアケヒメシラウオ',
      'アリゲーターガー', 'アルジーイーター', 'アルタムエンゼル', 'アルティディドラコオリアナエ', 'アレニプテルス', 'アロサ', 'ホソガツオ', 'アロワナ', 'アワイロコバンザメ',
      'アワセイソハゼ', 'チャカ', 'アンコウ', 'アンコウウバウオ', 'アンコクホラアナゴ', 'アンゴラバーブ', 'アンチョベータ', 'アンドレアスピス', 'アンフィスティウム',
      'イエローパーチ', 'イェンツーユイ', 'イカナゴ', 'イガフウリュウウオ', 'イケカツオ', 'イサキ', 'イサゴビクニン', 'イサザ', 'カエルアンコウ',
      'イシガキダイ', 'イシガキハタ', 'イシガキフグ', 'イシカリワカサギ', 'イシガレイ', 'イシカワシラウオ', 'イシダイ', 'イシドジョウ', 'イシドンコ',
      'イシナギ', 'イシフエダイ', 'イシモチ', 'シログチ', 'イシヨウジ', 'イズカサゴ', 'イスズミ', 'イズハナトラザメ', 'イズヒメエイ',
      'イズミハゼ', 'イセゴイ', 'イソアイナメ', 'イソカサゴ', 'イソギンポ', 'イソゴンベ', 'イソハゼ', 'イソバテンフグ', 'イソフエフキ',
      'イソマグロ', 'イソミミズハゼ', 'イタセンパラ', 'イタチウオ', 'イタチザメ', 'イダテンギンポ', 'イチモンジハゼ', 'イッテンアカタチ', 'イッテンサクラダイ',
      'イッテンチョウチョウウオ', 'イッテンフエダイ', 'イットウダイ', 'イトウ', 'イトヒキアジ', 'イトヒキイワシ', 'イトヒキインコハゼ', 'イトヒキサギ', 'イトヒキダラ',
      'イトヒキハゼ', 'イトヒキヒメ', 'イトヒキフエダイ', 'イトヒキベラ', 'イトヒゲモンジャハゼ', 'イトマキエイ', 'イトマキフグ', 'イドミミズハゼ', 'イトモロコ',
      'イトヨ', 'イトヨリダイ', 'イナカウミヘビ', 'イヌカサゴ', 'イヌゴチ', 'イヌザメ', 'イヌノシタ', 'ブリ', 'イネゴチ',
      'イバラタツ', 'イブリカマス', 'イボオコゼ', 'イボダイ', 'イラ', 'イラコアナゴ', 'イレズミガジ', 'イレズミコンニャクアジ', 'イレズミニザ',
      'イレズミハゼ', 'イレズミフエダイ', 'イレズミミジンベニハゼ', 'イロカエルアンコウ', 'イワアナコケギンポ', 'イワシ', 'マイワシ', 'カタクチイワシ',
      'ウルメイワシ', 'イワトコナマズ', 'イワナ', 'インドアカタチ', 'ヴァリアタス', 'ウイゴンベ', 'ウキゴリ', 'ウグイ', 'ウケグチメバル', 'ウケクチウグイ',
      'ウサギアイナメ', 'オオメジロザメ', 'ウシモツゴ', 'ウスバハギ', 'ウィーディ・シードラゴン', 'ウシノシタ', 'ウシモツゴ', 'ウスメバル', 'ウチワザメ',
      'ウチワフグ', 'ウッカリカサゴ', 'ウツセミカジカ', 'ウツボ', 'ウナギ', 'ウバウオ', 'ウバザメ', 'ウマヅラハギ', 'ウミショウブハゼ',
      'ウミスズメ', 'ウミタナゴ', 'ウミテング', 'ウミドジョウ', 'ウミヒゴイ', 'ウミメダカ', 'ウメイロ', 'ウメイロモドキ', 'ウラウチイソハゼ',
      'ウラウチフエダイ', 'ウラシマチョウチョウウオ', 'ウルメイワシ', 'ウロハゼ', 'ウンブキアナゴ', 'エイ', 'エイラクブカ', 'エソ', 'エゾアイナメ',
      'エゾイワナ', 'エゾウグイ', 'エゾクサウオ', 'エゾトミヨ', 'エゾハナカジカ', 'エゾホトケドジョウ', 'エゾメバル', 'エツ', 'エデスタス',
      'エトマロサ・フィンブリアタ', 'エドアブラザメ', 'エドハゼ', 'エビスザメ', 'エボシダイ', 'エボダイ', 'エポーレットシャーク', 'エリホシベニハゼ',
      'エレファントノーズフィッシュ', 'エンゼルフィッシュ', 'エンペラーテトラ', 'エンドラーズ・ライブベアラ', 'オアカムロ', 'オイカワ', 'オイランヨウジ',
      'オウゴンムラソイ', 'オウミヨシノボリ', 'オオイカナゴ', 'オオウナギ', 'オオウミウマ', 'オオウルマカサゴ', 'オオガタスジシマドジョウ', 'オオカミウオ', 'オオガラスハゼ',
      'オオキンブナ', 'オオグチイシチビキ', 'オオクチイシナギ', 'オオクチイワシ', 'オオクチバス', 'オオクチホシエソ', 'オオサガ', 'オオシタビラメ', 'オオシマドジョウ',
      'オオシャクダルマ', 'オオスジイシモチ', 'オオスジハタ', 'オオスジヒメジ', 'オオセ', 'オオタナゴ', 'スズキ', 'オオテンハナゴイ', 'オオチョウザメ', 'オオニベ', 'オオヒカリキンメ',
      'オオヒメ', 'オオメカマス', 'オオメジロザメ', 'オオメハゼ', 'オオメハタ', 'オオメマトウダイ', 'オオメワラスボ', 'オオモンハゲブダイ', 'オオヨシノボリ',
      'オオヨドシマドジョウ', 'オオワニザメ', 'オガサワラヨシノボリ', 'オカムラギンメ', 'オキアジ', 'オキアナゴ', 'オキエソ', 'オキキホウボウ', 'オキゴンベ', 'オキタナゴ',
      'オキナヒネジ', 'オキナホソヌタウナギ', 'オキナメジナ', 'オキナワキチヌ', 'オキナワクルマダイ', 'オキナワスズメダイ', 'オキナワベニハゼ', 'オキノシマウツボ', 'オキヒイラギ',
      'オキフエダイ', 'オキマツゲ', 'オクカジカ', 'オグロテンジクダイ', 'オグロメジロザメ', 'オニオコゼ', 'ハオコゼ', 'オジサン', 'オショロコマ',
      'オスジクロハギ', 'オトシンクルス', 'ハマダイ', 'オナガウツボ', 'オナガザメ', 'オニアジ', 'オニアンコウ', 'オニイシモチ', 'オニイトマキエイ',
      'オニオコゼ', 'オニカサゴ', 'オニカジカ', 'オニカナガシラ', 'オニカマス', 'オニキンメ', 'オニゴチ', 'オニシャチウオ', 'オニダルマオコゼ',
      'オニテングハギ', 'オニハゼ', 'オニハダカ', 'オニヒゲ', 'オニヒラアジ', 'オニベニハゼ', 'オニボラ', 'オハグロハギ', 'オハグロベラ',
      'オビテンスモドキ', 'オヒョウ', 'ボラ', 'オヤニラミ', 'オヤビッチャ', 'オヨギイソハゼ', 'オヨギベニハゼ', 'オンガスジシマドジョウ', 'ガー',
      'カイヤン', 'カイユウセンニンフグ', 'カイワリ', 'カエルアンコウ', 'カエルアンコウモドキ', 'カエルウオ', 'カエルハゼ', 'カガミダイ', 'カグラザメ',
      'カクレウオ', 'カクレクマノミ', 'カゴカキダイ', 'カゴカマス', 'カゴシマニギス', 'カサイダルマハゼ', 'カサゴ', 'カジカ', 'カジキ',
      'カジキ', 'カージナルテトラ', 'カシワハナダイ', 'カスザメ', 'ガストロ', 'カスミアジ', 'カスミサクラダイ', 'カスミチョウチョウウオ', 'カスミヤライイシモチ',
      'カスリフサカサゴ', 'カゼトゲタナゴ', 'カタクチイワシ', 'カタグロアゴナシ', 'カタボシアカメバル', 'カダボシイワシ', 'カダヤシ', 'カツオ', 'カッポレ',
      'カナガシラ', 'カナダダラ', 'カナド', 'カナフグ', 'カネコダルマガレイ', 'カネヒラ', 'カブトウオ', 'カボチャフサカサゴ', 'カマキリ',
      'カマス', 'カマスサワラ', 'カマスベラ', 'カマツカ', 'カミソリウオ', 'ハタハタ', 'カミナリベラ', 'カムルチー', 'ライギョ',
      'エゾメバル', 'カライワシ', 'カラス', 'ガラスウシノシタ', 'カラスガレイ', 'カラスザメ', 'カラスダラ', 'ガラスハゼ', 'カラドジョウ',
      'カラフトシシャモ', 'カラフトマス', 'ドクターフィッシュ', 'カレイ', 'カワアナゴ', 'カワカマス', 'カワハギ', 'カワバタモロコ', 'カワヒガイ',
      'カワビシャ', 'カワムツ', 'カワメバル', 'カワヤツメ', 'カワヨウジ', 'カワヨシノボリ', 'カワリヘビゲンゲ', 'カンキョウカジカ', 'ガンコ',
      'ガンゾウビラメ', 'コブダイ', 'カンディル', 'カンパチ', 'カンムリブダイ', 'カンモンハタ', 'カンランハギ', 'キアマダイ', 'キアンコウ',
      'キイロサンゴハゼ', 'キイロハギ', 'ギギ', 'ギグチ', 'キジハタ', 'キス', 'ギス', 'ギスカジカ', 'キスジイトマキフグ',
      'キダイ', 'キタイカナゴ', 'キタドジョウ', 'キタノアカヒレタベラ', 'キタノカスベ', 'キタノホッケ', 'キタノメダカ', 'キタマクラ', 'キチジ',
      'キチヌ', 'ギチベラ', 'キッシンググラミー', 'キツネアマダイ', 'キツネウオ', 'キツネカスベ', 'キツネダイ', 'キツネフエフキ', 'キツネベラ',
      'キツネメバル', 'キヌバリ', 'キノボリウオ', 'キハダ', 'ギバチ', 'キハッソク', 'キバラヨシノボリ', 'キビナゴ', 'キビレカワハギ',
      'キビレキントキ', 'キビレハタンポ', 'キビレミシマ', 'キヘリモンガラ', 'キホウボウ', 'キホシスズメダイ', 'ギマ', 'キュウセン', 'キュウリウオ',
      'キュウリエソ', 'キリンミノ', 'ギンイワシ', 'ギンカガミ', 'ギンガメアジ', 'キンギョ', 'キンギョハナダイ', 'キングクリップ', 'マスノスケ',
      'ギンザケ', 'ギンザメ', 'キンセンイシモチ', 'ギンダラ', 'キンチャクダイ', 'キントキダイ', 'キンブナ', 'ギンブナ', 'ギンポ',
      'ギンポハゼ', 'マジェランアイナメ', 'キンメダイ', 'ギンメダイ', 'キンメモドキ', 'ギンユゴイ', 'クエ', 'クギベラ', 'クサアジ',
      'クサウオ', 'クサカリツボダイ', 'クサギンポ', 'クサビフグ', 'クサビベラ', 'クサフグ', 'クサヤモロ', 'クジメ', 'クジャクカジカ',
      'カスミアカフウリュウウオ', 'クダゴンベ', 'クダヤガラ', 'モツゴ', 'グッピー', 'クツワハゼ', 'クテノポマ', 'クニマス', 'クマサカフグ',
      'クマササハナムロ', 'クマドリカエルアンコウ', 'クマドリコバンザメ', 'クマノカクレウオ', 'クマノミ', 'クマノミ', 'クモウツボ', 'クモギンポ', 'クモハゼ',
      'クラウンローチ', 'クラカケウツボ', 'クラカケトラギス', 'クラカケモンガラ', 'グラスフィッシュ', 'クラドセラケ', 'グラミー', 'クーリーローチ', 'グリーンネオンテトラ',
      'グリーンファイヤーテトラ', 'グルクマ', 'タカサゴ', 'クルマダイ', 'クルメサヨリ', 'メジナ', 'クレナイニセスズメ', 'クロアジモドキ', 'クロアナゴ',
      'クロイシモチ', 'クロウシノシタ', 'クロウミウマ', 'クロウミドジョウ', 'クロエソ', 'クロオビハゼ', 'クロオビマツカサ', 'クロカジキ', 'クロガシラガレイ',
      'クロカジキ', 'クロゲンゲ', 'クロサギ', 'クロサバフグ', 'クロシビカマス', 'クロスジスカシテンジクダイ', 'クロソイ', 'クロソラスズメダイ', 'クロダイ',
      'クロタチカマス', 'クロダハゼ', 'クロダルマハゼ', 'クロトガリザメ', 'クロヌタウナギ', 'クロハギ', 'クロヒラアジ', 'クロボウズギス', 'クロホシイシモチ',
      'クロホシフエダイ', 'クロホシマンジュウダイ', 'クロマグロ', 'クロマスク', 'クロミナミハゼ', 'ムツ', 'クロメジナ', 'クロメバル', 'クロモンツキ',
      'クロヨシノボリ', 'グローライトテトラ', 'ケショウフグ', 'ケムシカジカ', 'ゲンコ', 'ゲンゴロウブナ', 'ゲンロクダイ', 'ギンザケ', 'ゴールデントラウト',
      'コイ', 'コウライオヤニラミ', 'コウライガジ', 'コウライカスベ', 'コウライケツギョ', 'コウライトラギス', 'コウライニゴイ', 'コウライマナガツオ', 'コウライモロコ',
      'コウライヨロイメバル', 'コオリカジカ', 'ゴギ', 'コクチバス', 'コクチフサカサゴ', 'コクテンニセヘビギンポ', 'コクテンフグ', 'コクテンベンケイハゼ', 'コクハンアラ',
      'ゴクラクハゼ', 'コクレン', 'コケギンポ', 'コケノコギリ', 'コケビラメ', 'コシナガ', 'コショウダイ', 'コチ', 'コチョウザメ',
      'ゴテンアナゴ', 'コトヒキ', 'コノシロ', 'リーフフィッシュ', 'コバンザメ', 'コブコオリカジカ', 'コブシカジカ', 'コブダイ', 'コペラ',
      'コボラ', 'ゴマアイゴ', 'コマイ', 'ゴマウツボ', 'ゴマサバ', 'ゴマソイ', 'ゴマチョウチョウウオ', 'ゴマテングハギモドキ', 'ゴマニザ',
      'ゴマハゼ', 'ゴマヒレキントキ', 'ゴマフエダイ', 'ゴマフグ', 'ゴマフシビレエイ', 'ゴマモンガラ', 'コモリウオ', 'コモンカスべ', 'コモンサカタザメ',
      'コモンフグ', 'コモンヤナギハゼ', 'ゴリ', 'コリドラス', 'コロザメ', 'コロダイ', 'コロソマ', 'コロダイ', 'コンゴウアナゴ',
      'コンゴウテンジクダイ', 'コンゴウフグ', 'コンゴテトラ', 'ゴンズイ', 'コンテリボウズハゼ', 'コンニャクイワシ', 'コンニャクカジカ', 'コンビクトシクリッド', 'コンペイトウ',
      'サカサナマズ', 'サカタザメ', 'サガミザメ', 'サガミソコダラ', 'サギフエ', 'サクヤヒメジ', 'サクラダイ', 'サクラダンゴウオ', 'サクラマス',
      'サケ', 'サケガシラ', 'サケビクニン', 'ササウシノシタ', 'サザナミダイ', 'サザナミトサカハギ', 'サザナミフグ', 'サザナミヤッコ', 'ササムロ',
      'サザンプラティフィッシュ', 'サツキハゼ', 'サツキマス', 'サッパ', 'サツマカサゴ', 'サバヒー', 'サバフグ', 'サビウツボ', 'サビハゼ',
      'サメガレイ', 'サメクトビレ', 'サヨリ', 'ザラカスべ', 'ザラガレイ', 'サラサゴンベ', 'サラサハギ', 'サラサハタ', 'サラビクニン',
      'サワラ', 'サンインコガタスジシマドジョウ', 'ナガヅエエソ', 'サンゴアイゴ', 'サンゴイワシ', 'サンコウメヌケ', 'サンゴトラザメ', 'パイクパーチ', 'サンマ',
      'サンヨウコガタスジシマドジョウ', 'シイラ', 'シーラカンス', 'シギウナギ', 'ジギョ', 'シクリッド', 'シシャモ', 'シズクイソハゼ', 'シズミイソコケギンポ',
      'シタビラメ', 'シッポウフグ', 'シナイモツゴ', 'シノドンティス', 'シノノメサカタザメ', 'シノビドジョウ', 'スズキ', 'シビレエイ', 'シファクティヌス',
      'シベリアヤツメ', 'シマアジ', 'シマアラシウツボ', 'シマイサキ', 'シマイタチウオ', 'シマウキゴリ', 'シマウシノシタ', 'シマウミスズメ', 'シマウミヘビ',
      'シマガツオ', 'シマキンチャクフグ', 'シマギンポ', 'シマセトダイ', 'シマゾイ', 'シマダイ', 'シマドジョウ', 'シマハギ', 'シマハタ',
      'シマハタタテダイ', 'シマヒイラギ', 'シマヒレヨシノボリ', 'シマフグ', 'シマヨシノボリ', 'シミズシマイサキ', 'ジムナーカス', 'シモフリカジカ', 'シモフリシマハゼ',
      'シモフリタナバタウオ', 'シャチブリ', 'ジャノメハゼ', 'ジュウサンウグイ', 'シュオビコバンザメ', 'ジュズカケハゼ', 'シュモクザメ', 'シィウサイフグ', 'ショベルノーズキャットフィッシュ',
      'シラウオ', 'シラコダイ', 'シルバーアロワナ', 'シルバーシャーク', 'シルベーヘイク', 'シロアマダイ', 'シロウオ', 'シロカサゴ', 'シロカジキ',
      'シロガネアジ', 'シロギス', 'シログチ', 'シロクラベラ', 'シロゲンゲ', 'シロサバフグ', 'シロザメ', 'シロシュモクザメ', 'シロダイ',
      'シロタスキベラ', 'シロヒレタベラ', 'シロブチハタ', 'シロメバル', 'シロワニ', 'シワイカナゴ', 'シンカイヨロイダラ', 'シンジコハゼ', 'ジンベエザメ',
      'スイ', 'スカラレ・エンゼル', 'スカシテンジクダイ', 'スギ', 'スケトウダラ', 'スケトウダラ', 'スゴモロコ', 'スジアラ', 'スジオテンジクダイ',
      'スジギンポ', 'スジクロハギ', 'スジシマドジョウ', 'スジダラ', 'スジハゼ', 'スジハナビラウオ', 'スジブダイ', 'スズキ', 'スズハモ',
      'スズメダイ', 'スダレチョウチョウウオ', 'ステューレポルス', 'ストライプドバス', 'スナガレイ', 'スナヤツメ', 'ライギョ', 'スポッテッドガー', 'スマ',
      'スミウキゴリ', 'スミクイウオ', 'スミツキアカタチ', 'スミレナガハナダイ', 'スミレヤッコ', 'スリースポットグラミー', 'スワモロコ', 'スズキ', 'セイルフィン・モーリー',
      'セキトリイワシ', 'セグロチョウチョウウオ', 'セスジボラ', 'ゼゼラ', 'セダカクロサギ', 'セダカハナアイゴ', 'セトウシノシタ', 'セトダイ', 'ゼニタナゴ',
      'セビロカジカ', 'ゼブラウツボ', 'ゼブラフィッシュ', 'セボシタビラ', 'セミホウボウ', 'センニンフグ', 'センネンダイ', 'センハダカ', 'ソイ',
      'ソウシカエルアンコウ', 'ソウシハギ', 'ソウハチ', 'ソードテール', 'ソウギョ', 'ソウダガツオ', 'ソコアナゴ', 'ソコアマダイ', 'ソコイトヨリ',
      'ソコイワシ', 'ソコカナガシラ', 'ソコクロダラ', 'ソコハリゴチ', 'ソデアナゴ', 'ソトイワシ', 'ソラスズメダイ', 'ターポン', 'タイ',
      'マダイ', 'キダイ', 'クロダイ', 'ダイオウイカ', 'タイガーショベルノーズキャットフィッシュ', 'タイガーレッドテールキャットフィッシュ', 'ダイヤモンドテトラ', 'タイセイヨウクロマグロ',
      'タイセイヨウサケ', 'タイセイヨウダラ', 'タラ', 'バラタナゴ', 'ライギョ', 'タウナギ', 'タカサゴ', 'タカノハダイ', 'タカハヤ', 'タカベ', 'タキゲンロクダイ',
      'ダトニオ', 'タチウオ', 'ダツ', 'タツノオトシゴ', 'タテジマキンチャクダイ', 'タナゴ', 'タニノボリ', 'タマカイ', 'タモロコ',
      'タラ', 'ダルマガレイ', 'ダルマザメ', 'ダンゴウオ', 'チカ', 'チゴダラ', 'チダイ', 'チチカカオレスティア', 'チチブ',
      'クロダイ', 'チョウザメ', 'チョウチョウウオ', 'チョウチンアンコウ', 'チョウハン', 'チョコレートグラミー', 'チンアナゴ', 'オイカワ', 'ツチフキ',
      'ツナ', 'ツノダシ', 'ツバサハゼ', 'ツバメウオ', 'ツバメコノシロ', 'ツボダイ', 'ツマグロ', 'ツムギハゼ', 'ツムブリ',
      'ディスカス', 'ティラピア', 'テッポウウオ', 'テトラ', 'テナガミズテング', 'デバスズメダイ', 'デメニギス', 'デュメリリィ・エンゼル', 'デンキウナギ',
      'デンキナマズ', 'テングダイ', 'テングハギ', 'テンジクダイ', 'トウカイコガタスジシマドジョウ', 'トウカイナガレホトケドジョウ', 'トウカイヨシノボリ', 'トウゴロウイワシ', 'トウジン',
      'トウヨシノボリ', 'ドクターフィッシュ', 'トクビレ', 'トゲチョウチョウウオ', 'トサカハギ', 'トサシマドジョウ', 'ドジョウ', 'ドチザメ', 'ボラ',
      'トビウオ', 'トビエイ', 'トビハゼ', 'トミヨ', 'トラウツボ', 'トラギス', 'トラザメ', 'ドラード', 'トラフグ',
      'トラフザメ', 'ドロメ', 'ドワーフグラミー', 'ドワーフシクリッド', 'ドワーフスネークヘッド', 'ドンコ', 'チゴダラ', 'エゾイソアイナメ', 'トランスルーセントグラスキャットフィッシュ',
      'ナイフフィッシュ', 'ナイルアロワナ', 'ナイルパーチ', 'ナガヅエエソ', 'ナガテングハギモドキ', 'ナガニザ', 'ナシフグ', 'ナヌカザメ', 'ナベカ',
      'メガネモチノウオ', 'ナマズ', 'ナミダクロハギ', 'ナメラハギ', 'ナンヨウツバメウオ', 'ナンヨウハギ', 'ニギス', 'ニゴイ', 'ニゴロブナ',
      'ニザダイ', 'ニシキアナゴ', 'ニシキテグリ', 'ニシキベラ', 'ニジハギ', 'ニジマス', 'ニジョウサバ', 'ニシン', 'ニセカンランハギ',
      'ニセクロスジギンポ', 'ウツボ', 'バラタナゴ', 'ニベ', 'ニュージーランドミナミアユ', 'ニンジャカラスザメ', 'ヌエハゼ', 'ヌタウナギ', 'ヌノサラシ',
      'ヌマガレイ', 'ヌマムツ', 'ネオンテトラ', 'ネコギギ', 'ネコザメ', 'ネズミゴチ', 'ネズミザメ', 'ネムリブカ', 'ノコギリエイ',
      'ノコギリザメ', 'ノコギリダイ', 'ノーザンバラムンディ', 'パーカーホ', 'ハイギョ', 'カワカマス', 'ハイランド・カープ', 'ブリモドキ', 'ハオコゼ',
      'ハガツオ', 'ハクレン', 'ハコフグ', 'ハコベラ', 'ハシナガチョウチョウウオ', 'バショウカジキ', 'ハス', 'バス', 'ハゼ',
      'ハタ', 'バターフィッシュ', 'ハダカイワシ', 'ハタタテダイ', 'ハタタテハゼ', 'ハタハタ', 'バタフライフィッシュ', 'チョウチョウウオ科', 'ハタンポ',
      'ハチェットフィッシュ', 'トクビレ', 'ハナオコゼ', 'ハナザメ', 'ハナヒゲウツボ', 'ハナミノカサゴ', 'パピリオクロミス・アルティスピノーサ', 'ハマクマノミ', 'ハマダイ',
      'ブリ', 'ハマフエフキ', 'ハモ', 'ハヤ', 'バラタナゴ', 'バラハタ', 'バラフエダイ', 'バラマンディ', 'バラムツ',
      'ハリセンボン', 'ハリヨ', 'バルーンモーリー', 'パンダゲンロクダイ', 'ヒイラギ', 'ヒウチダイ', 'ヒオドン', 'ヒガイ', 'ヒガシシマドジョウ',
      'ヒカリキンメダイ', 'ピグミーグラミー', 'ヒナハゼ', 'ヒナモロコ', 'ヒフキアイゴ', 'ヒメ', 'ヒメオコゼ', 'ヒメジ', 'メダカ',
      'ヒメダイ', 'ヒメツバメウオ', 'ヒメテングハギ', 'ヒメハゼ', 'ヒメマス', 'ヒラ', 'ヒラアジ', 'ギンガメアジ', 'カイワリ',
      'ヒョウモンドジョウ', 'ピライーバ', 'ソウダガツオ', 'ピラニア', 'ヒラニザ', 'ヒラマサ', 'ヒラメ', 'アマゴ', 'ピラルクー',
      'ビワコオオナマズ', 'ビワヒガイ', 'ビワマス', 'ビワヨシノボリ', 'ビンナガ', 'フウセンウナギ', 'フウライカジキ', 'フウライチョウチョウウオ', 'フエダイ',
      'フエフキダイ', 'フエヤッコダイ', 'フグ', 'フクロウナギ', 'フシギウオ', 'フジクジラ', 'ブダイ', 'スズキ', 'フナ',
      'ブラウントラウト', 'ブラックアロワナ', 'ブラックバス', 'オオクチバス', 'コクチバス', 'サザンプラティフィッシュ', 'ブリ', 'プリステラ', 'フリソデウオ',
      'ブリモドキ', 'ブルーギル', 'プレコ', 'プロトプテルス', 'フロリダバス', 'プンティウス', 'ヘコアユ', 'ペーシュ・カショーロ', 'ヘダイ',
      'ベニザケ', 'ベタ', 'ナイルアロワナ', 'ベニザケ', 'ヘビギンポ', 'ペヘレイ', 'ベラ', 'ヘラチョウザメ', 'ゲンゴロウブナ',
      'ヘラヤガラ', 'ペレスメジロザメ', 'ペンシルフィッシュ', 'ボウエンギョ', 'ホウネンエソ', 'ホウズキ', 'ボウズハゼ', 'ホウボウ', 'ホウライエソ',
      'ホキ', 'ホースフェイスローチ', 'ホシガレイ', 'ホシザメ', 'キス', 'ホースフェイスローチ', 'ポタモトリゴン・モトロ ', 'ホタルジャコ', 'ホッケ',
      'ホテイウオ', 'ホトケドジョウ', 'ホホジロザメ', 'ボラ', 'ラスボラ', 'ポリプテルス', 'ホワイトフィッシュ', 'ホンソメワケベラ', 'ホンモロコ',
      'カジキ', 'マーレーコッド', 'マアジ', 'マアナゴ', 'マイワシ', 'マカジキ', 'カレイ', 'マグロ', 'マゴチ',
      'マサバ', 'マジェランアイナメ', 'マス', 'マスキー', 'マスノスケ', 'マダイ', 'マダラ', 'マダラタルミ', 'マダラトビエイ',
      'マツカサウオ', 'マツカワ', 'マツダイ', 'マトウダイ', 'マナガツオ', 'マハゼ', 'マハタ', 'マフグ', 'マブナ',
      'サッパ', 'マルアオメエソ', 'ソウダガツオ', 'オニイトマキエイ', 'マンボウ', 'ミカヅキツバメウオ', 'ミシマオコゼ', 'ミズウオ', 'ミスジリュウキュウスズメダイ',
      'ミズワニ', 'ミツクリエナガチョウチンアンコウ', 'ミツクリザメ', 'ミツバヤツメ', 'ミツボシクロスズメダイ', 'ミツマタヤリウオ', 'ミドリフグ', 'ミナミハコフグ',
      'ミナミハタンポ', 'ミナミマグロ', 'ミナミメダカ', 'ミノカサゴ', 'ミミズハゼ', 'ミヤコタナゴ', 'ミヤコテングハギ', 'ミヤベイワナ', 'ムギツク', 'ムツ',
      'ムツゴロウ', 'ムブナ', 'ムベンガ', 'ムレハタタテダイ', 'ムロアジ', 'メイタガレイ', 'メイチダイ', 'メカジキ', 'メガマウス',
      'メガネクロハギ', 'メガネモチノウオ', 'メガロドン', '化石', 'ヌタウナギ', 'メゴチ', 'メジナ', 'メジロザメ', 'メダイ',
      'メダカ', 'メチニス', 'メナダ', 'メヌケ', 'アラスカメヌケ', 'メバチ', 'メバル', 'メルルーサ', 'マジェランアイナメ',
      'モツゴ', 'モルミルス', 'モロコ', 'クエ', 'モンガラカワハギ', 'モンガラドオシ', 'クマノミ', 'モンツキハギ', 'ヤイトハタ',
      'ヤガラ', 'メジロザメ', 'ヤジリハゼ', 'ヤシャハゼ', 'ヤシャベラ', 'ヤスジチョウチョウウオ', 'ヤツメウナギ', 'ヤナギムシガレイ', 'ヤマノカミ',
      'ヤマメ', 'ヤミスズキ', 'ヤリカタギ', 'ヤリタナゴ', 'ユウゼン', 'ユカタハタ', 'ユゴイ', 'ユメカサゴ', 'ユメウメイロ',
      'ヨウジウオ', 'ヨーロッパオオナマズ', 'ヨーロッパタナゴ', 'ヨーロピアンシーバス', 'ヨコシマタマガシラ', 'ヨコヅナイワシ', 'ヨゴレ', 'ヨシキリザメ', 'ヨシノボリ',
      'ヨスジフエダイ', 'ヨスジリュウキュウスズメダイ', 'ヨツメウオ', 'ヨメヒメジ', 'ヨリトフグ', 'ヨロイ', 'ヨロイイタチウオ', 'ヨロイザメ', 'ヨロイメバル',
      'ラージグラス', 'ライギョ', 'ラスボラ', 'ラッド', 'ラブカ', 'ラミーノーズテトラ', 'リーフィーシードラゴン', 'リーフフィッシュ', 'アユ',
      'リュウグウノツカイ', 'シロガネアジ', 'ルリスズメダイ', 'ルリハタ', 'レイクトラウト', 'レインボーテトラ', 'レインボーフィッシュ', 'ドチザメ',
      'レッドテールキャットフィッシュ', 'レッドテールブラックシャーク', 'レモンザメ', 'レンギョ', 'プレコ', 'ロウニンアジ', 'ロングノーズガー', 'ワカサギ',
      'ワタカ', 'ワニエソ', 'ワニトカゲギス', 'ワヌケフウリュウウオ', 'ワヌケモンガラドオシ', 'ブリ', 'ワラスボ', 'タコ',
    ];

    // アスペクトのない動詞
    const PT_NO_ASPECT = [
      '晴れ', '曇り', '腫れ', '似', 'すぐれ', '優れ', '尖り', 'とがり', 'ありふれ', '出来', 'でき', '値し', '要り', '入れ',
      'いり', 'られ', 'され', 'いたし', '在り', '有り', 'ござい', '違い', 'ちがい', '灯り', '点り', '延び', '積もり', '損じ',
      '積り', 'すぎ', 'あふれ', '溢れ', '困り', '見え', 'みえ', '聞こえ', 'きこえ', '聴こえ', '異なり', '強まり', '弱まり',
      '広まり', '高まり', '決まり', '始まり', 'はじまり', '詰まり', '行き詰まり', '当てはまり', '貯まり', '溜まり', 'たまり', '改まり',
      '走れ', '歩け', '聞け', '見られ', '学べ', '楽しめ', '要し', '届き', '読め', 'さしかかり', '差し掛かり', '頑張れ', 'がんばれ',
      'ひっぱれ', '光り', 'ござり', 'おり', '過ぎ', '相当し', '意味し', '実在し', '存在し', 'まさり', '勝り', '優り', 'そびえ',
      '聳え', 'ばかげ', '馬鹿げ', '似合い', 'にあい', '関連し', '冷え', 'ふぶき', '吹雪き', 'はやり', '流行り', '聞え', 'におい',
      '匂い', '臭い', '痛み', '傷み', 'うずき', '疼き', '震え', 'ふるえ', 'くらみ', '眩み', '疲れ', 'つかれ', '緊張し',
      'もたれ', 'しびれ', '痺れ', 'かわき', '渇き', '乾き', '増え', '減り', '弱り', 'よわり', 'つよまり', '退屈し', '生き', '尽き',
      '生じ', '恥じ', '落っこち', '満ち', 'あき', '飽き', '転じ', '命じ', '伸び', 'のび', '通じ', 'こぼれ', '舞い下り',
      'こぼれおち', '零れ落ち', '滅び', 'ほろび', '案じ', '乗じ', '生まれ落ち', '応じ', '燃え尽き', '滑り落ち', 'むくい', '報い',
      '老い', '帯び', '転がり落ち', '事足り', '滴り落ち', '崩れ落ち', '夢見', '強い', '朽ち', // '逃げ延び', '生き延び',
      '断じ', '転げ落ち', '高じ', '悔い', '長じ', '懲り', '抜け落ち', '年老い', 'ほころび', '綻び', '減じ', 'さび', '錆び',
      '軽んじ', '安んじ', '満ち足り', '枯れ落ち', '干涸び', '崩じ', '待ち侘び', '疎んじ', '殉じ', '萎び', '動じ', '因み', 'やみ',
      '止み', '浮かび上がり', 'ほのめかし', '仄めかし', '鳴り', 'たすかり', '助かり', '惑い', 'かぎり', '限り', '服し', '反り', '誤り',
      '定まり', '当て嵌まり', 'かない', '適い', '有し', '経ち', 'あまり', '余り', '咲き', '群がり', '好み', '劣り', 'ただよい',
      '漂い', '血走り', '腐り', '富み', '驕り', '早まり', '澄まし', '陥り', 'もとり', '悖り', 'もたつき', '極まり', 'たまわり',
      '賜り', '賜わり', '醸し', '湿り', '深まり', '育ち', 'かげり', '陰り', '翳り', '実り', '祭り', '潤い', '病み', 'みなぎり',
      'へこみ', '凹み', 'なじみ', '馴染み', '関し', 'だぶり', 'ダブり', 'ゆがみ', '歪み', '連なり', '浮き', '患い', 'わずらい',
      '煩い', 'にぶり', '鈍り', 'かおり', '香り', '薫り', '太り', '肥り', '薄らぎ', 'にごり', '濁り', 'たわみ', '撓み',
      '滞り', 'とどこおり', '黒ずみ', '叶い', 'たぎり', '滾り', '狭まり', '和らぎ', 'ほとばしり', '迸り', 'かかり','罹り', 'トラブり',
      '漲り', 'かたより', '偏り', 'バグり', '茂り', '降り頻り', '降りしきり', '蔓延り', 'はびこり', '燻らし', 'くゆらし', 'あやしみ',
      'よだち', 'ざわつき', 'ていし', '呈し', 'はさまり', '挟まり', '泡立ち', '泡だち', 'くぼみ', '窪み', '煮立ち', 'こおりつき',
      '凍り付き', '出っ張り', '出っぱり', 'でっぱり', 'きしみ', '軋み', 'ゆるみ', '緩み', '凍りつき', '怪しみ',  'あてはまり', 'しげり',
      'たいくつし', 'しなび', 'こと足り', 'うとんじ', '待ちわび', '言え', 'いえ', 'しれ', '知れ', '足り', '違い', '異なり', 'ヒリヒリし',
      '思い',
      // あり、は、でありましょうの時例外
      // 明日は晴れます。特定できます。TODO::始まりましょうよ! 光りましょう。輝きましょう!
      // 状態動詞はル形で現在を表す => 聞こえる
      // 「ヒリヒリし」は辞書登録が必要
    ];

    // 意思・勧誘・推量(期待)の特定の表現になるもの
    const PT_CONVERT_END = [
      // 文字数の長い順に登録する
      // 'が、良いお手本になりましょう' => 'を良いお手本にしてください', あなたが良いお手本になりましょう...
      // 'が良いお手本になりましょう' => 'を良いお手本にしてください',
      'が、良い参考になりましょう' => 'を良い参考にしてください',
      'が良い参考になりましょう' => 'を良い参考にしてください',
      'がお手本になりましょう' => 'をお手本にしてください',
      'そびえ立っていましょう' => 'そびえ立っています',
      '張り切っていきましょう' => '張り切っていってください',
      'やってくださいましょう' => 'やってくれるでしょう',
      'が、参考になりましょう' => 'を参考にしてください',
      'できごととなりましょう' => 'できごとになるでしょう',
      'できごとになりましょう' => 'できごとになるでしょう',
      'が参考になりましょう' => 'を参考にしてください',
      '高まっていきましょう' => '高まっていくでしょう',
      '弱まっていきましょう' => '弱まっていくでしょう',
      '被害が広がりましょう' => '被害が広がるでしょう',
      '広まっていきましょう' => '広まっていくでしょう',
      '始まっていきましょう' => '始まっていくでしょう',
      '試金石となりましょう' => '試金石になります',
      '試金石になりましょう' => '試金石になります',
      '出来事となりましょう' => 'できごとになるでしょう',
      '出来事になりましょう' => 'できごとになるでしょう',
      'ごらんにいれましょう' => 'ご覧にいれます', // 見ていただきます・見てください
      'ごらんに入れましょう' => 'ご覧にいれます', // 見ていただきます・見てください
      '本降りになりましょう' => '本降りになるでしょう', // (雨が)強くなるでしょう
      'お見せいたしましょう' => 'お見せします', // 見ていただきます・見てください
      '聳え立っていましょう' => 'そびえ立っています',
      '例えられていましょう' => '例えられています',
      '被害が広がりましょう' => '被害が広がるでしょう',
      // '存在していましょうか' => '存在しています', // あります
      '真っ暗になりましょう' => '真っ暗になります',
      '医者にかかりましょう' => '医者にかかってください', // 医者の診察を受けてください
      '士気も上がりましょう' => '士気も上がります',
      '士気が上がりましょう' => '士気が上がります',
      '士気は上がりましょう' => '士気は上がります',
      '士気も下がりましょう' => '士気も下がります',
      '士気が下がりましょう' => '士気が下がります',
      '士気は下がりましょう' => '士気は下がります',
      'やる気を出しましょう' => 'やる気を出してください',
      '診断を受けましょう' => '診断を受けてください',
      '判断を仰ぎましょう' => '判断を仰いでください',
      '評判になりましょう' => '評判になるでしょう',
      '評判となりましょう' => '評判になるでしょう',
      '人気になりましょう' => '人気になるでしょう',
      '人気となりましょう' => '人気になるでしょう',
      '結論になりましょう' => '結論になるでしょう',
      '結論となりましょう' => '結論になるでしょう',
      '解答になりましょう' => '解答になるでしょう',
      '解答となりましょう' => '解答になるでしょう',
      '回答になりましょう' => '回答になるでしょう',
      '回答となりましょう' => '回答になるでしょう',
      '答えになりましょう' => '答えになるでしょう',
      '答えとなりましょう' => '答えになるでしょう',
      '証拠になりましょう' => '証拠になるでしょう',
      '証拠となりましょう' => '証拠になるでしょう',
      '参考になりましょう' => '参考にしてください',
      '参考となりましょう' => '参考にしてください',
      '被害となりましょう' => '被害になるでしょう',
      '被害になりましょう' => '被害になるでしょう',
      '日和になりましょう' => '日和になるでしょう',
      '上手くいきましょう' => 'うまくいくでしょう', // うまくいくと思います
      'うまくいきましょう' => 'うまくいくでしょう', // うまくいくと思います
      '上手く行きましょう' => 'うまくいくでしょう', // うまくいくと思います
      'うまく行きましょう' => 'うまくいくでしょう', // うまくいくと思います
      'ご覧にいれましょう' => 'ご覧にいれます', // お見せします
      'ご覧になれましょう' => 'ご覧になれます', // 見ることができます
      '晴れになりましょう' => '晴れになるでしょう', // 晴れます
      '曇りになりましょう' => '曇りになるでしょう', // 曇ります
      '晴天になりましょう' => '晴天になるでしょう', // 晴天です
      '天気になりましょう' => '天気になるでしょう', // 天気です
      '意味になりましょう' => '意味になります',
      // 'やっていきましょう' => 'やっていってください',
      // 'やって行きましょう' => 'やっていってください',
      'やってくれましょう' => 'やってくれるでしょう',
      // '冷やしていましょう' => '冷やしています', // 頭を冷やしていましょう
      'ご覧に入れましょう' => 'ご覧にいれます', // 見てください
      // '存在していましょう' => '存在するでしょう', // あります
      '例えられましょうか' => '例えられます', // 例えることができます
      'も良くなりましょう' => 'も良くなります',
      'が良くなりましょう' => 'が良くなります',
      'は良くなりましょう' => 'は良くなります',
      'も悪くなりましょう' => 'も悪くなります',
      'が悪くなりましょう' => 'が悪くなります',
      'は悪くなりましょう' => 'は悪くなります',
      'も変わりましょう' => 'も変わります',
      'は変わりましょう' => 'は変わります',
      'もうかりましょう' => 'もうかるでしょう',
      'してくれましょう' => 'してくれるでしょう',
      'つつありましょう' => 'つつあります',
      '例えられましょう' => '例えられます', // 例えることができます
      '数えられましょう' => '数えられます', // 数えることができます
      '食べられましょう' => '食べられます', // 食べることができます
      '雨が降りましょう' => '雨が降るでしょう', // 雨がふります
      '雨がふりましょう' => '雨が降るでしょう', // 雨がふります
      // '温めていましょう' => 'あたためています', // アイデアを温めていましょう
      // '暖めていましょう' => 'あたためています',
      'となりましょう' => 'になります',
      // 'でありましょう' => 'です', // 頼りになる存在でありましょう
      // '、敗退しましょう' => '、敗退するでしょう', いさぎよく敗退しましょう
      '儲かりましょう' => 'もうかるでしょう',
      '期待しましょう' => '期待してください',
      'ておりましょう' => 'ています',
      '晴れましょう' => '晴れるでしょう', // 晴れです
      'がりましょう' => 'がります',
      // TODO::文末の言い換え可能なパターンを登録する
      '地震を観測しました' => '地震がありました',
    ];

    // 判断のつかないもの
    const PT_MASHOU_EXCLUDES = [
      'お見せしましょう', // => 基本的には、多くは、お見せします。
    ];

    // サ変接続＋しましょう、でアスペクトのない動詞表現となるもの
    const PT_SA_INTENTIONS = [
      '案内', '値引き', '値引', '招待', '接待', '点灯', '相当', '実在', '存在', '意味', '待機', '勉強',
      // 案内します。招待します。
    ];

    const PT_CONVERT_DE_SHOU = [
      'といいでしょう' => ['基本形', 'イ', 'てください'],
      'とよいでしょう' => ['基本形', 'イ', 'てください'],
      'と良いでしょう' => ['基本形', 'イ', 'てください'],
      'ないでしょう' => ['未然形', '', 'ません'],
      'でしょう' => ['基本形', 'イ', 'ます'],
/*例外
步	名詞,一般,*,*,*,*,*
か	助詞,副助詞／並立助詞／終助詞,*,*,*,*,か,カ,カ
ない	形容詞,自立,*,*,形容詞・アウオ段,基本形,ない,ナイ,ナイ
*/
    ];

    const PT_SOKUONBIN = [
      // 促音便
      '成る', '持つ', '有る', '因る', '当たる', '乗る', '巡る', '知る', '受け取る', '握る', '譲る', 'さしかかる',
      '振り返る', '辿る', '作る', '売る', '渡る', '取る', '立ち入る', '殴る', '育つ', '切る', '怒る',
      '開き直る', '遣る', '戻る', '貯まる', '乗っかる', '決まる', '生き残る', '掛かる', '成り立つ', '破る', '守る',
      '走る', '打つ', '待つ', '被る', '丸まる', '立つ', '変わる', '入る', '喋る', '鳴る', '語る', '係る', 'かかる',
      '分かる', '黙る', '残る', '回る', '唸る', '始まる', '無くなる', '仕切る', '寄る', '下さる', '伝わる', '掛かる',
      '亡くなる', '頼る', '祈る', '配る', '移る', '見積もる', '送る', '先立つ', '曲がる', '異なる', '怠る',
      '保つ', 'たまる', '横たわる', '劣る', 'こだわる', '至る', '返る', '絞る', '終わる', '去る', '盛り上がる',
      '関わる', '限る', '飛び散る', '止まる', '誇る', '上る', '重なる', '区切る', '起こる', '下る', '見付かる',
      '繋がる', '陥る', '立ち至る', '誤る', '集まる', '凝る', '連なる', '行き詰まる', '名乗る', '祭る', '広がる',
      '上がる', '形作る', '張る', '浮かび上がる', '付け加わる', '纏まる', '断る', '映る', '経つ', '居る', '操る',
      '振る', '押し切る', '承る', '司る', '留まる', '賜わる', '象る', '放つ', '切れ上がる', '収まる', '思い切る',
      '沸き返る', '立ち寄る', 'とちる', '踊る', '捻る', '忍び寄る', '困る', '見張る', '座る', '加わる', '思い立つ',
      '遡る', '立ち止まる', '染まる', '切り取る', '過る', '広まる', '突っ切る', '塗る', '降る', '強まる', 'らしい',
      '探る', '掘る', '凍る', '助かる', '読み耽る', '取り掛かる', '折る', 'ぶつかる', '浸かる', '際立つ', '連れ帰る',
      '腐る', '役立つ', '受け持つ', '定まる', '諮る', '写し取る', '生い茂る', '蘇る', '連れ去る', '書き送る', '降り懸かる',
      '漁る', '上回る', '流行る', '言い切る', '攀じ登る', '削る', '持ち帰る', '仰る', '為さる', '出来上がる', '迫る',
      '贈る', '遠ざかる', '飾る', '目立つ', '聞き取る', '温まる', 'だ', '参る', '召し上がる', '通る', '干上がる',
      '彫る', '茂る', '散る', '引き取る', '眠る', '過ぎ去る', '捲る', 'がる', '捨て去る', '煽る', '混じる',
      '余る', '擦る', '揺さぶる', '触る', '引っ張る', '交わる', '横切る', '盛る', '太る', '揺する', '弄る',
      '見取る', '教わる', '繰る', '写る', '滅入る', '泊まる', '転がる', '高まる', '割る', '割り切る', '下がる',
      '荒し回る', '減る', '則る', '縮まる', '耽る', '反る', '巣立つ', '飛び回る', '差し迫る', '浸る', '言い放つ',
      '度重なる', '携わる', '踏み切る', '締め括る', '放る', '静まる', '立ち上る', '悟る', '交じる', '走り回る', '煮立つ',
      '垂れ下がる', '測る', '詰まる', '打ち破る', '渋る', '先走る', '啜る', '発つ', '駆け回る', '群がる', '織る',
      '弱る', '潜る', '感じ取る', '捕まる', '縛る', '腫れ上がる', '引っ掛かる', '物語る', '頑張る', '勝る', '瞑る',
      '引き下がる', '乗り切る', '跳ね返る', '綴る', '立ち塞がる', '勝ち取る', '旅立つ', '立ち上がる', '歩き回る', '近寄る', '見守る',
      '勝つ', 'よる', 'そそり立つ', '寝そべる', '入り交じる', '静まり返る', '駆け寄る', '遮る', '躙り寄る', '差し掛かる', '起き上がる',
      '混ざる', '絡まる', '孵る', '打ち切る', '改まる', '積もる', '持ち上がる', '直る', '図る', '持ち寄る', '下り立つ',
      'へたばる', '買い取る', '駆る', '出張る', '湿気る', '溜まる', '陰る', '隠し持つ', '固まる', '預かる', '連れ立つ',
      '伸び上がる', 'うねる', '燃え上がる', '備わる', '生る', '張り切る', '怒鳴る', '生い育つ', '断ち切る', '申し送る', '儲かる',
      '欲張る', 'ちびる', '見送る', '早まる', '立ち去る', '仰け反る', '恐れ入る', '掠る', '擽る', '聞き入る', '立ちはだかる',
      '銘打つ', '入れ替わる', '皮肉る', '香る', '極まる', '飛び立つ', '捩る', '騙る', 'ぶら下がる', '引き攣る', '歩み寄る',
      '濁る', '尖る', 'くぐもる', '蹴る', '寄り掛かる', '吊る', '引き締まる', '締まる', '羽織る', '後ずさる', '火照る',
      '驕る', 'いらっしゃる', '光る', 'はる', '見入る', '湿る', '温もる', '苛立つ', '縮こまる', '押し黙る', '言い募る',
      '謝る', '募る', '振り絞る', '縋る', '引き摺る', 'がかる', '曇る', '黙りこくる', '粘る', 'とる', '乗り移る',
      '居座る', '見返る', '向き直る', 'ちぎる', '褒めちぎる', '焦る', '叱る', '押し入る', '走り去る', '起き直る', '罵る',
      '刈る', '齧る', 'しゃくる', '骨張る', '剃る', '沸き上がる', '愚痴る', 'しくじる', '抜き取る', '咲き誇る', '煙る',
      '学び取る', '滾る', '突き破る', '嘲る', '授かる', '鞭打つ', '灯る', '凝り固まる', '滾つ', '迸る', '生まれ変わる',
      '透き通る', '集る', '引っ繰り返る', '食い切る', '祟る', '燃え立つ', '跳ね上がる', 'ぶん殴る', '飛び上がる', '埋まる', '弱まる',
      '成り下がる', '実る', '思い知る', '思い余る', '与る', '言い張る', '表立つ', '寝入る', '消え去る', '思い上がる', '食い下がる',
      '括る', '値切る', '天下る', '突っ張る', '血走る', '寝転がる', '逸る', '角張る', '陣取る', '強請る', '揺る',
      '言い付かる', '奥まる', '付け上がる', '掻い潜る', '生き返る', '滑る', 'のさばる', '主立つ', 'くたばる', '疑る', '突っ走る',
      '読み取る', '踏ん張る', '突き刺さる', '浮き上がる', '罹る', 'なぞる', '拭き取る', '燻る', '曲がりくねる', '切り立つ', '乗り掛かる',
      '持ち去る', '切羽詰まる', '通り掛かる', '見破る', 'へし折る', '蹲る', '休まる', '退る', '動き回る', '勇み立つ', '伸し上がる',
      '若返る', '思い止まる', 'いびる', '口走る', '掻き毟る', '断つ', '散らかる', '覆る', '奮い立つ', '踏み躙る', '挟まる',
      '散らばる', '葬る', '威張る', '粒立つ', '上擦る', '高鳴る', '憤る', '縮み上がる', '漲る', '真面目くさる', 'ひん曲がる',
      '偽る', '積み重なる', 'ダブる', 'あやかる', '細る', '摩る', '立ち返る', '打ち勝つ', '謗る', '勘繰る', '練る',
      '翻る', '奉る', '沸き起こる', '奪い取る', '折れ曲がる', '感じ入る', '書き取る', '取り仕切る', '勝ち誇る', '彩る', '吸い取る',
      '穿つ', '挙る', '染み入る', '振り切る', '押し遣る', '有り余る', '摘み取る', '偏る', '愚図る', '被さる', '思い当たる',
      '躍り上がる', '取り去る', '着飾る', '遜る', '塞がる', '切り替わる', '手間取る', '波立つ', '裏切る', '込み入る', '娶る',
      '骨折る', '伏せる', '抉る', '見遣る', '冴え返る', '頬張る', '経上がる', 'のたうち回る', '高ぶる', '入り浸る', '託つ',
      '波打つ', '詰る', 'たる', '滞る', '漬かる', '年寄る', '呷る', '立ち戻る', '脂ぎる', '選る', 'ぼる',
      '嬲る', '気取る', '毟る', 'よだつ', '引きちぎる', '痛み入る', '滴る', '粟立つ', 'まさぐる', '攻め上る', '蔓延る',
      '障る', '咲き残る', '深まる', '吊り上がる', 'けちる', 'ふんだくる', '見縊る', '振りかぶる', '抜き放つ', '宿る', '鞘走る',
      '這いずる', 'こんがらかる', '生い立つ', '訝る', '罷り通る', '抱き取る', '解き放つ', '舞い戻る', '逃げ回る', '居直る', '泡立つ',
      '飛び乗る', '呆れ返る', '追い縋る', '詰め寄る', '善がる', '明け放つ', '打ち取る', '擦り寄る', '重る', '畏まる', '選りすぐる',
      'へばる', '逃げ帰る', '立ち直る', '遊び回る', 'ほじくる', '仕上がる', '掻き曇る', '端折る', '寝静まる', '沸き立つ', '折り重なる',
      '御座る', 'はだかる', '揺すぶる', '出っ張る', '舞い上がる', '蹴破る', '押し詰まる', '突き当たる', '出回る', '囀る', '寝返る',
      '植わる', '吃る', 'ぬかる', '負ぶさる', '炒る', '燃え盛る', '取り締まる', '小切る', '炙る', 'サボる', '落っこちる',
      '隔たる', '下回る', '気張る', '刈り取る', '削り取る', '汲み取る', '競る', '要る', '駆けずり回る', '刷り上がる', 'びびる',
      '煮え立つ', '読み誤る', '噎せ返る', '競い立つ', '締め切る', '竦み上がる', '反り返る', '峙つ', '降り積もる', '鈍る', '牛耳る',
      '見知る', '居残る', 'くねる', '取り持つ', '晴れ上がる', '鯱張る', 'もぎ取る', '分捕る', '踏み止まる', '見回る', '抓る',
      '煮詰まる', 'つんのめる', '聞き齧る', 'のめる', '引き立つ', 'おちょくる', '身罷る', '契る', '食い入る', '呼ばわる', '哮り立つ',
      'むずかる', '恥じ入る', '狩る', '薄まる', '立ち回る', '言い寄る', '悄気返る', '脈打つ', '漏る', '狭まる', '取り縋る',
      '触れ回る', '爪繰る', 'そそる', '耳立つ', '載っかる', 'すぐる', '纏わる', '訛る', '寝取る', '出で立つ', '震え上がる',
      '躄る', '猛る', '煮え返る', '才走る', '窄まる', '推し量る', '分かつ', '成り上がる', '合わさる', 'ござる', 'とがる',
      '点る', 'ともる', '籠る', 'ある', 'いる', 'はじまる', '積る', '見積る', '降り積る', '積り', 'なる', '笑う', 'わらう',
    ];

    const PT_HATSUONBIN = [
      // 撥音便
      '頼む', '死ぬ', '突き進む', '並ぶ', '読む', '飛ぶ', '遊ぶ', '掴む', '考え込む', '入り込む', '及ぶ',
      '済む', '住む', '呼ぶ', '進む', '学ぶ', '取り組む', '悩む', '選ぶ', '積む', '思い悩む', '生む',
      '苦しむ', '立ち並ぶ', '挟む', '飛び込む', '運ぶ', '含む', '呑む', '目論む', '眩む', '因む', '尊ぶ',
      '取り結ぶ', '移り住む', '萎む', '歩む', '潜む', '買い込む', '乗り込む', '申し込む', '企む', '微笑む', '喜ぶ',
      '飲み込む', '望む', '結ぶ', '忍ぶ', '営む', '睨む', '楽しむ', '黒ずむ', '休む', '摘む', '励む',
      '叫ぶ', '転がり込む', '打ち込む', '積み込む', '染み込む', '編む', '絡む', '飲む', '込む', '流れ込む', '霞む',
      '挑む', '取り囲む', '囲む', '思い込む', '惜しむ', '好む', '見込む', '切り込む', '持ち込む', '止む', '付け込む',
      '富む', '踏み込む', '売り込む', '病む', '弾む', '窪む', '怯む', 'のめり込む', '包む', '包み込む', '踏む',
      'はにかむ', '歪む', '臨む', '孕む', '泊まる', '滲む', '押し込む', '拒む', '張り込む', '転ぶ', '刻む',
      '哀れむ', '澄む', '浮かぶ', '着込む', '埋め込む', '滑り込む', '力む', '溜め込む', '悲しむ', '縮む', '懐かしむ',
      '入り組む', '盛り込む', '伸び悩む', '組み込む', '植え込む', '組む', '仕組む', '決め込む', '引っ込む', '沈む', '阻む',
      '切り刻む', '舞い込む', '詰め込む', 'しゃがむ', '頼み込む', '信じ込む', '口ずさむ', '惚れ込む', '落ち込む', '放り込む', '混む',
      '凹む', '吸い込む', '仕込む', '潜り込む', '屈む', '乗り組む', '注ぎ込む', '噛む', '眠り込む', '和む', '待ち望む',
      '立ち竦む', '投げ込む', '呉れる', '振り込む', '咳き込む', 'かじかむ', '言い淀む', '淀む', '噤む', '膨らむ', '溶け込む',
      '黙り込む', '建て込む', '住み込む', '揉む', '恨む', '拝む', '捩じ込む', '急き込む', '追い込む', '芽ぐむ', '蔑む',
      '連れ込む', '駆け込む', 'まどろむ', '座り込む', '軋む', '抱え込む', '凄む', '吹き飛ぶ', '引っ掴む', '寝転ぶ', '憎む',
      'せがむ', '動き回る', '有る', '馴染む', '焼け死ぬ', '緩む', '畳む', '食い込む', '割り込む', '潤む', '勇む',
      '嵌め込む', '佇む', '盗む', '差し込む', '切れ込む', '遣る', '立て込む', '勤しむ', '慎む', '涙ぐむ', '背負い込む',
      '聞き込む', 'くすむ', '痛む', '押さえ込む', '回り込む', '勢い込む', '挟み込む', '迷い込む', '寝取る', '拭き込む', '偲ぶ',
      '送り込む', '僻む', '親しむ', '悼む', '逃げ込む', '弛む', '消し飛ぶ', '掻い摘む', '攻め込む', '染む', '北叟笑む',
      '書き込む', '育む', '巻き込む', '怒鳴り込む', '羨む', '聞き及ぶ', '忍び込む', '減り込む', '刷り込む', '煮込む', '折り畳む',
      '叩き込む', '塞ぎ込む', '取り込む', '居並ぶ', '流し込む', '話し込む', 'しけこむ', '封じ込む', '吹き込む', '御座る', '倦む',
      '危ぶむ', '為さる', '掘り進む', '覚え込む', '怪しむ', '引き込む', '談じ込む', '倒れ込む', '滅ぶ', '竦む', '誑し込む',
      '汲む', '染みる', '縫い込む', '悔やむ', '切り結ぶ', '刈り込む', '白む', '苛む', '妬む', '膿む', '走り込む',
      '掻き込む', '乱れ飛ぶ', '嵩む', '寝込む', '荒む', '絞り込む', '詠み込む', '撓む', '綻ぶ', '泣き叫ぶ', '弄ぶ',
      '咽ぶ', '黙る', '手挟む', '転げ込む', '啄む', '紛れ込む', '当て込む', '恵む', '返る', '運び込む', '浮腫む',
      '打ち沈む', '蝕む', '刻み込む', '鼻白む', '赤らむ', '好き好む', '丸め込む', '儚む', '食む', '呼び込む', '冷え込む',
      '上がり込む', '差し挟む', '眠る', '彫り込む', '使い込む', '温む', '嗜む', '落とし込む', '垂れ込む', '殴り込む', '老け込む',
      '泊まり込む', '入る', '明るむ', '乗る', '躍り込む', '誘い込む', '織り込む', '取り運ぶ', 'だ', '抱き込む', '勝ち進む',
      'やっかむ', '息む', '睦む', 'まねぶ', '繰り込む', '忌む', '折り込む', '凍る', '慈しむ', '責め苛む', '畳み込む',
      '明らむ', '堪え忍ぶ', '涼む', '切り苛む', '炊き込む', '釣り込む', '買い進む', '嫉む', '上がる', '読み込む', '磨き込む',
      '切る', '座る', '持ち運ぶ', '窄む', '泣き沈む', '編み込む', 'ずれ込む', '漬け込む', 'すっこむ', 'いとおしむ', '擦り込む',
      '詰む', '放る', 'どよむ', '鋳込む', '値切る', '頑張る', '笑む', '払い込む', '汲み込む', '疎む', '当たる',
      '慰む', '思い及ぶ', '泥む', '降り込む', '吸い取る', '泣き込む', '悄気込む', '往ぬ', '下さる', '語り込む', '威張る',
      '否む', '綴じ込む', '触れ込む', '作る', '伏し拝む', '折れ込む', '巧む', 'ダブる', 'とる',
    ];

    function __construct () {
        $app = Prototype::get_instance();
        $this->app = $app;
        $plugin = $app->component( 'SimplifiedJapanese' );
        $this->plugin = $plugin;
        $mecab = $plugin->get_mecab( $app );
        $this->cabocha = file_exists( $app->simplifiedjapanese_cabocha_path );
        $this->intentions = array_merge( self::PT_INTENTIONS, self::PT_ANIMALS, self::PT_FISHES );
    }

    function normal_sentence_end ( $text, $end = '。' ) {
        $text = trim( $text );
        $q_end = preg_quote( $end, '/' );
        $length = mb_strlen( $text );
        if ( $length > self::PT_CHECK_LEN ) {
            $length = $length - self::PT_CHECK_LEN;
            $text = mb_substr( $text, $length );
        }
        $parse = $this->plugin->mecab_parse( $text );
        $count = count( $parse );
        if (!isset( $parse[ $count - 5] ) ) {
            return [];
        }
        $last = $parse[ $count - 1];
        if ( $last !== 'EOS') {
            return [];
        }
        $last = $parse[ $count - 2];
        if ( strpos( $last, $end ) !== 0 ) {
            return [];
        }
        $end_word = '';
        if ( $this->remove_final_particle
            && ( $parse[ $count - 3 ] === "ぜ\t助詞,終助詞,*,*,*,*,ぜ,ゼ,ゼ"
              || $parse[ $count - 3 ] === "よ\t助詞,終助詞,*,*,*,*,よ,ヨ,ヨ"
              || $parse[ $count - 3 ] === "ね\t助詞,終助詞,*,*,*,*,ね,ネ,ネ"
              || $parse[ $count - 3 ] === "さ\t助詞,終助詞,*,*,*,*,さ,サ,サ"
              || $parse[ $count - 3 ] === "な\t助詞,終助詞,*,*,*,*,な,ナ,ナ"
            ) ) {
            $end_word = mb_substr( $parse[ $count - 3 ], 0, 1 );
            $text = preg_replace( "/{$end_word}{$q_end}$/u", $end, $text );
            $original = $text;
            unset( $parse[ $count - 3 ] );
            $parse = array_values( $parse );
            $count--;
            if (!isset( $parse[ $count - 5] ) ) {
                return [];
            }
        }
        $last = $parse[ $count - 3];
        list ( $lword, $lcsv ) = static::disassembly( $last );
        $pre = $parse[ $count - 4];
        $fin = $parse[ $count - 5];
        list ( $pword, $pcsv ) = static::disassembly( $pre );
        list ( $fword, $fcsv ) = static::disassembly( $fin );
        $add_last = '';
        $pre_text_num = $count - 5;
        $check_text = rtrim( $text, $end );
        if ( ( $lword === 'か' && $lcsv[1] === '副助詞／並立助詞／終助詞' )
            || ( $lword === 'かい' && $lcsv[1] === '終助詞' )
            || ( $lword === 'ね' && $lcsv[1] === '終助詞' )
            || ( $lword === 'よ' && $lcsv[1] === '終助詞' ) ) {
            if (! isset( $parse[ $count - 6] ) ) {
                return [];
            }
            $add_last = $lword;
            $lword = $pword;
            $lcsv  = $pcsv;
            $pword = $fword;
            $pcsv  = $fcsv;
            $fin = $parse[ $count - 6];
            $pre_text_num = $count - 6;
            list ( $fword, $fcsv ) = static::disassembly( $fin );
            if ( ( $lword === 'か' && $lcsv[1] === '副助詞／並立助詞／終助詞' )
            || ( $lword === 'かい' && $lcsv[1] === '終助詞' )
            || ( $lword === 'ね' && $lcsv[1] === '終助詞' )
            || ( $lword === 'よ' && $lcsv[1] === '終助詞' ) ) {
                // 〜かね？
                if (! isset( $parse[ $count - 7] ) ) {
                    return [];
                }
                $add_last = $lword . $add_last;
                $lword = $pword;
                $lcsv  = $pcsv;
                $pword = $fword;
                $pcsv  = $fcsv;
                $fin = $parse[ $count - 7];
                $pre_text_num = $count - 7;
                list ( $fword, $fcsv ) = static::disassembly( $fin );
            }
            $check_text = preg_replace( "/{$add_last}$/", '', $check_text );
        }
        $pre_text = '';
        for ( $i = 1; $i < 3; $i++ ) {
            $fin = $parse[ $pre_text_num - $i ] ?? '';
            if ( strpos( $fin, "\t" ) !== false ) {
                $pre_text = explode( "\t", $fin )[0] . $pre_text;
            }
        }
        $search = "{$fword}{$pword}{$lword}{$add_last}{$end_word}{$end}";
        if ( preg_match( '/ました$/', $check_text ) ) {
            $change = $fcsv[4];
            $dan = null;
            $gyou = null;
            $onbin = null;
            if ( strpos( $change, '段' ) !== false ) {
                list( $dan, $gtou_onbin ) = explode( '段', $change );
                $dan = mb_substr( $dan, -1 );
            }
            if ( strpos( $change, '行' ) !== false ) {
                list( $gyou, $onbin ) = explode( '行', $change );
                $gyou = mb_substr( $gyou, -1 );
            }
            $phrase = $fcsv[6];
            if ( $dan === '一' ) {
                $phrase = preg_replace( '/.$/u', 'た', $phrase );
                $replace = "{$phrase}{$add_last}{$end}";
                return $search !== $replace ? [ $search, $replace ] : [];
            } else if ( $dan === '五' && $gyou && isset( self::PT_INSTRUCTION_MAP[ $gyou ] ) ) {
                $s_end = self::PT_INSTRUCTION_MAP[ $gyou ];
                // 申し込みました。歩きました。
                $s_end = $s_end === 'ん' ? "{$s_end}だ" : "{$s_end}た";
                $phrase = preg_replace( '/.$/u', $s_end, $phrase );
                $replace = "{$phrase}{$add_last}{$end}";
                return $search !== $replace ? [ $search, $replace ] : [];
            }
        } else if ( preg_match( '/ませんでした$/', $check_text ) ) {
            $check = $add_last ? 8 : 7;
            if (! isset( $parse[ $count - $check ] ) ) {
                return [];
            }
            $check = $parse[ $count - $check ];
            list ( $cword, $ccsv ) = static::disassembly( $check );
            $check = $add_last ? 8 : 8;
            if (! isset( $parse[ $count - $check ] ) ) {
                return [];
            }
            $pcheck = $parse[ $count - $check ];
            list ( $pcword, $pccsv ) = static::disassembly( $pcheck );
            if ( $cword === 'あり' && $ccsv[4] == '五段・ラ行' ) {
                // ありませんでした。
                $search = "{$pcword}ありませ{$search}";
                $replace = "{$pcword}なかった{$add_last}{$end}";
                return $search !== $replace ? [ $search, $replace ] : [];
            }
            if ( strpos( $ccsv[4], '段' ) !== false ) {
                $change = $ccsv[4];
                $dan = null;
                $gyou = null;
                $onbin = null;
                if ( strpos( $change, '段' ) !== false ) {
                    list( $dan, $gtou_onbin ) = explode( '段', $change );
                    $dan = mb_substr( $dan, -1 );
                }
                if ( strpos( $change, '行' ) !== false ) {
                    list( $gyou, $onbin ) = explode( '行', $change );
                    $gyou = mb_substr( $gyou, -1 );
                }
                $phrase = $ccsv[6];
                if ( $dan === '一' ) {
                    // 貰えませんでした。
                    $search = "{$cword}ませ{$search}";
                    $replace = "{$cword}なかった{$add_last}{$end}";
                    return $search !== $replace ? [ $search, $replace ] : [];
                } else if ( $dan === '五' && $gyou ) {
                    // 歩きませんでした。
                    $search = "{$cword}ませ{$search}";
                    $phrase = preg_replace( '/.$/u', mb_convert_kana( $gyou, 'c' ), $phrase );
                    $replace = "{$phrase}なかった{$add_last}{$end}";
                    return $search !== $replace ? [ $search, $replace ] : [];
                }
            }
        } else if ( preg_match( '/でした$/', $check_text ) ) {
            $replace = "{$fword}だった{$add_last}{$end}";
            return $search !== $replace ? [ $search, $replace ] : [];
        } else if ( preg_match( '/です$/', $check_text ) ) {
            if ( strpos( $add_last, 'か' ) === 0 && $pword === 'の' ) {
                // のですか。
                $replace = "{$fword}の{$add_last}{$end}";
                return $search !== $replace ? [ $search, $replace ] : [];
            }
            $replace = "{$fword}{$pword}だ{$add_last}{$end}";
            return $search !== $replace ? [ $search, $replace ] : [];
        } else if ( preg_match( '/ます$/', $check_text ) ) {
            if ( $pword === 'あり' && $pcsv[4] == '五段・ラ行' ) {
                // があります。
                $replace = "{$fword}ある{$add_last}{$end}";
                return $search !== $replace ? [ $search, $replace ] : [];
            }
            if ( strpos( $pcsv[4], '段' ) !== false ) {
                // 私は歩きます。私は歩けます。
                $change = $pcsv[4];
                $dan = null;
                $gyou = null;
                $onbin = null;
                if ( strpos( $change, '段' ) !== false ) {
                    list( $dan, $gtou_onbin ) = explode( '段', $change );
                    $dan = mb_substr( $dan, -1 );
                }
                if ( strpos( $change, '行' ) !== false ) {
                    list( $gyou, $onbin ) = explode( '行', $change );
                    $gyou = mb_substr( $gyou, -1 );
                }
                $phrase = $pcsv[6];
                if ( ( $dan === '一' ) || ( $dan === '五' && $gyou ) ) {
                    $replace = "{$fword}{$phrase}{$add_last}{$end}";
                    return $search !== $replace ? [ $search, $replace ] : [];
                }
            }
        } else if ( preg_match( '/ません$/', $check_text ) ) {
            if ( $fword === 'あり' && $fcsv[4] == '五段・ラ行' ) {
                // がありません。
                $replace = "{$fword}ない{$add_last}{$end}";
                return $search !== $replace ? [ $search, $replace ] : [];
            }
            if ( strpos( $fcsv[4], '段' ) !== false ) {
                $change = $fcsv[4];
                $dan = null;
                $gyou = null;
                $onbin = null;
                if ( strpos( $change, '段' ) !== false ) {
                    list( $dan, $gtou_onbin ) = explode( '段', $change );
                    $dan = mb_substr( $dan, -1 );
                }
                if ( strpos( $change, '行' ) !== false ) {
                    list( $gyou, $onbin ) = explode( '行', $change );
                    $gyou = mb_substr( $gyou, -1 );
                }
                $phrase = $fcsv[6];
                if ( $dan === '一' ) {
                    // くれません。
                    $replace = "{$fword}ない{$add_last}{$end}";
                    $phrase = preg_replace( '/.$/u', mb_convert_kana( $gyou, 'c' ), $phrase );
                    $replace = "{$phrase}ない{$g}{$end}";
                    return $search !== $replace ? [ $search, $replace ] : [];
                } else if ( $dan === '五' && $gyou ) {
                    // 私は知りません。
                    $phrase = preg_replace( '/.$/u', mb_convert_kana( $gyou, 'c' ), $phrase );
                    $replace = "{$phrase}ない{$add_last}{$end}";
                    return $search !== $replace ? [ $search, $replace ] : [];
                }
            }
        } else if ( $lword === 'う' && $lcsv[0] === '助動詞' && $lcsv[4] === '不変化型' ) {
            if ( preg_match( '/ましょう$/', $check_text ) && $fcsv[0] == '動詞' ) {
                if ( $fcsv[4] === 'カ変・来ル' ) {
                    $fword = $fword === 'き' ? 'こ' : $fword;
                    $replace = "{$fword}よう{$add_last}{$end}";
                    return $search !== $replace ? [ $search, $replace ] : [];
                } else if ( $fcsv[4] === 'サ変・スル' ) {
                    $replace = "{$fword}よう{$add_last}{$end}";
                    return $search !== $replace ? [ $search, $replace ] : [];
                } else if ( strpos( $fcsv[4], '段' ) !== false ) {
                    $change = $fcsv[4];
                    $dan = null;
                    $gyou = null;
                    $onbin = null;
                    if ( strpos( $change, '段' ) !== false ) {
                        list( $dan, $gtou_onbin ) = explode( '段', $change );
                        $dan = mb_substr( $dan, -1 );
                    }
                    if ( strpos( $change, '行' ) !== false ) {
                        list( $gyou, $onbin ) = explode( '行', $change );
                        $gyou = mb_substr( $gyou, -1 );
                    }
                    $phrase = $fcsv[6];
                    if ( strpos( $change, '促音便' ) !== false && $gyou && isset( self::PT_CHANGE_SOUND_MAP[ $gyou ] ) ) {
                        // 行きましょう => 行こう、来ましょう => 来よう
                        $phrase = preg_replace( '/.$/u', self::PT_CHANGE_SOUND_MAP[ $gyou ], $phrase );
                        $replace = "{$phrase}う{$add_last}{$end}";
                        return $search !== $replace ? [ $search, $replace ] : [];
                    } else if ( $fcsv[5] === '連用形' ) {
                        // ありましょう。
                        $replace = "{$phrase}だろう{$add_last}{$end}";
                        return $search !== $replace ? [ $search, $replace ] : [];
                    }
                }
            } else if ( preg_match( '/でしょう$/', $check_text ) ) {
                $replace = "{$fword}だろう{$add_last}{$end}";
                return $search !== $replace ? [ $search, $replace ] : [];
            }
        }
        if ( $remove_final_particle ) {
            $search = $pre_text . $search;
            $replace = preg_replace( "/{$end_word}{$q_end}$/u", $end, $search );
            return $search !== $replace ? [ $search, $replace ] : [];
        }
        return [];
    }

    function respectful_sentence_end ( $text, $end = '。', &$connector = '' ) {
        $app = $this->app;
        $allow_end_nominal = $this->allow_end_nominal;
        $ambiguous = $this->ambiguous;
        $maybe = $this->maybe;
        $text = trim( $text );
        $convert_ends = self::PT_CONVERT_END;
        $no_aspect = self::PT_NO_ASPECT;
        $sokuonbin = self::PT_SOKUONBIN;
        $hatsuonbin = self::PT_HATSUONBIN;
        $personal_pronoun_1st = self::PERSONAL_PRONOUN_1ST;
        $convert_ends = $this->convert_ends ?? self::PT_CONVERT_END;
        if (!$this->convert_ends ) {
            $no_aspects = $this->plugin->mecab_parse_simple( implode( 'ます ', $no_aspect ), null, true );
            // 予めハッシュにしてしまうほうが速い
            foreach ( $no_aspects as $idx => $data ) {
                if ( $data === 'EOS' ) break;
                list( $word, $csv ) = $data;
                // 意図しない分割を吸収する
                if ( $word === '値' ) {
                    /*
                        値	名詞,一般,*,*,*,*,値,ネ,ネ
                        し	動詞,自立,*,*,サ変・スル,連用形,する,シ,シ
                        ます	助動詞,*,*,*,特殊・マス,基本形,ます,マス,マス
                    */
                    $word = '値し';
                    $csv = explode( ',', '動詞,自立,*,*,サ変・−スル,未然形,値する,アタイシ,アタイシ' );
                } else if ( isset( $no_aspects[ $idx + 1] ) && $no_aspects[ $idx + 1] !== 'EOS' ) {
                    if ( $word === 'で' && $no_aspects[ $idx + 1][0] === 'き' ) {
                        // できる	動詞,自立,*,*,一段,基本形,できる,デキル,デキル
                        $word = 'でき';
                        $csv = explode( ',', '動詞,自立,*,*,一段,連用形,できる,デキ,デキ' );
                    } else if ( $word === 'さ' && $no_aspects[ $idx + 1][0] === 'れ' ) {
                        // される	動詞,接尾,*,*,一段,基本形,される,サレル,サレル
                        $word = 'され';
                        $csv = explode( ',', 'され	動詞,接尾,*,*,一段,連用形,される,サレ,サレ' );
                    }
                }
                if ( $word === 'ます' || $word === 'し' || $word === 'き' || $word === 'れ' || $word === 'り' ) {
                    continue;
                }
                $word_replace = '';
                $word_replace2 = '';
                $word_replace3 = '';
                $word_replace4 = '';
                $word2 = $word . 'ましょう';
                $word3 = $word;
                $word4 = $word;
                if ( $csv[0] === '動詞' && $csv[5] === '連用形' ) {
                    $word_replace2 = $csv[6] . 'でしょう';
                } else if ( $csv[0] === '名詞' && $csv[1] === '一般' ) {
                    $word_replace2 =$word === '積り' ? '積もるでしょう' : $csv[6] . 'るでしょう';
                    // 積り	名詞,一般,*,*,*,*,積り,ツモリ,ツモリ
                } else {
                    // 試合は開催されましょう。試合はありましょう。
                    if ( mb_strlen( $word ) > 1 ) {
                        $word_replace2 = $csv[6] . 'でしょう';
                    } else {
                        $word_replace2 = $word . 'ます';
                    }
                }
                if ( $word === 'ござい' ) {
                    $word .= 'ましょう';
                    $word_replace = 'あります';
                    $word_replace2 = $word_replace;
                } else if ( $csv[4] === '五段・カ行イ音便' ) {
                    $word = preg_replace( '/.$/u', 'いていましょう', $csv[6] );
                    $word3 = preg_replace( '/.$/u', 'いてきましょう', $csv[6] );
                    $word_replace = preg_replace( '/.$/u', 'いています', $csv[6] );
                    $word_replace3 = preg_replace( '/.$/u', 'いてきます', $csv[6] );
                    $word4 = preg_replace( '/.$/u', 'いておりましょう', $csv[6] );
                    $word_replace4 = preg_replace( '/.$/u', 'いています', $csv[6] );
                } else if ( in_array( $csv[6], $sokuonbin ) || strpos( $csv[4], '促音便' ) !== false ) {
                    $word = preg_replace( '/.$/u', 'っていましょう', $csv[6] );
                    $word3 = preg_replace( '/.$/u', 'ってきましょう', $csv[6] );
                    $word_replace = preg_replace( '/.$/u', 'っています', $csv[6] );
                    $word_replace3 = preg_replace( '/.$/u', 'ってきます', $csv[6] );
                    $word4 = preg_replace( '/.$/u', 'っておりましょう', $csv[6] );
                    $word_replace4 = preg_replace( '/.$/u', 'っています', $csv[6] );
                } else if ( in_array( $csv[6], $hatsuonbin ) || strpos( $csv[4], '撥音便' ) !== false ) {
                    $word = preg_replace( '/.$/u', 'んでいましょう', $csv[6] );
                    $word3 = preg_replace( '/.$/u', 'んできましょう', $csv[6] );
                    $word_replace = preg_replace( '/.$/u', 'んでいます', $csv[6] );
                    $word_replace3 = preg_replace( '/.$/u', 'んできます', $csv[6] );
                    $word4 = preg_replace( '/.$/u', 'んでおりましょう', $csv[6] );
                    $word_replace4 = preg_replace( '/.$/u', 'んでいます', $csv[6] );
                } else {
                    $word_replace = $word . 'ています';
                    $word_replace3 = $word . 'てきます';
                    $word .= 'ていましょう';
                    $word3 .= 'てきましょう';
                }
                if ( strpos( $word_replace, 'するでしょう' ) !== false ) {
                    $word_replace = str_replace( 'するでしょう', 'します', $word_replace );
                } else if ( strpos( $word_replace, 'あるでしょう' ) !== false ) {
                    $word_replace = str_replace( 'あるでしょう', 'あります', $word_replace );
                }
                if ( strpos( $word_replace2, 'するでしょう' ) !== false ) {
                    $word_replace2 = str_replace( 'するでしょう', 'します', $word_replace2 );
                } else if ( strpos( $word_replace2, 'あるでしょう' ) !== false ) {
                    $word_replace2 = str_replace( 'あるでしょう', 'あります', $word_replace2 );
                }
                $convert_ends[ $word ] = $word_replace;
                $convert_ends[ $word2 ] = $word_replace2;
                if ( $word_replace3 ) {
                    $convert_ends[ $word3 ] = $word_replace3;
                }
                if ( $word_replace4 ) {
                    $convert_ends[ $word4 ] = $word_replace4;
                }
            }
            $sa_intentions = self::PT_SA_INTENTIONS;
            foreach ( $sa_intentions as $sa_intention ) {
                $word = $sa_intention . 'しましょう';
                $word2 = $sa_intention . 'していましょう';
                $word3 = $sa_intention . 'しておりましょう';
                $word_replace = $sa_intention . 'しています';
                $convert_ends[ $word ] = $word_replace;
                $convert_ends[ $word2 ] = $word_replace;
                $convert_ends[ $word3 ] = $word_replace;
                $convert_ends[ $word4 ] = $word_replace;
            }
            $this->convert_ends = $convert_ends;
        }
        $q_end = preg_quote( $end, '/' );
        $question = PTUtil::normalize( $end ) === '?';
        foreach ( $convert_ends as $convert_end => $convert_replace ) {
            if ( strpos( $text, $convert_end ) !== false ) {
                if ( preg_match( "/{$convert_end}{$q_end}$/u", $text ) ) {
                    return [ $convert_end . $end, $convert_replace . $end ];
                }
            }
        }
        $original = $text;
        $length = mb_strlen( $text );
        if ( $length > self::PT_CHECK_LEN ) {
            $length = $length - self::PT_CHECK_LEN;
            $text = mb_substr( $text, $length );
        }
        $parse = $this->plugin->mecab_parse( $text, $this->mecab, $app );
        $count = count( $parse );
        if (!isset( $parse[ $count - 5] ) ) {
            return [];
        }
        $last = $parse[ $count - 1];
        if ( $last !== 'EOS') {
            return [];
        }
        $last = $parse[ $count - 2];
        if ( strpos( $last, $end ) !== 0 ) {
            return [];
        }
        $end_word = '';
        $end_part = '';
        $remove_final_particle = false;
        if ( $this->remove_final_particle
            && ( $parse[ $count - 3 ] === "ぜ\t助詞,終助詞,*,*,*,*,ぜ,ゼ,ゼ"
              || $parse[ $count - 3 ] ===  "よ\t助詞,終助詞,*,*,*,*,よ,ヨ,ヨ"
              || $parse[ $count - 3 ] ===  "ね\t助詞,終助詞,*,*,*,*,ね,ネ,ネ"
              || $parse[ $count - 3 ] ===  "さ\t助詞,終助詞,*,*,*,*,さ,サ,サ"
              || $parse[ $count - 3 ] ===  "な\t助詞,終助詞,*,*,*,*,な,ナ,ナ"
            ) ) {
            $end_word = mb_substr( $parse[ $count - 3 ], 0, 1 );
            $end_part = $parse[ $count - 3 ];
            $text = preg_replace( "/{$end_word}{$q_end}$/u", $end, $text );
            $original = $text;
            unset( $parse[ $count - 3 ] );
            $parse = array_values( $parse );
            $count--;
            if (!isset( $parse[ $count - 5] ) ) {
                return [];
            }
            $remove_final_particle = true;
        }
        $last = $parse[ $count - 3];
        list ( $lword, $lcsv ) = static::disassembly( $last );
        $pre = $parse[ $count - 4];
        $fin = $parse[ $count - 5];
        list ( $pword, $pcsv ) = static::disassembly( $pre );
        list ( $fword, $fcsv ) = static::disassembly( $fin );
        $ffword = '';
        $ffcsv  = [];
        if ( isset( $parse[ $count - 6] ) ) {
            list ( $ffword, $ffcsv ) = static::disassembly( $parse[ $count - 6] );
        }
        $add_last = '';
        $pre_text_num = $count - 5;
        $count_last = $count - 3;
        if ( ( $lword === 'か' && $lcsv[1] === '副助詞／並立助詞／終助詞' )
            || ( $lword === 'かい' && $lcsv[1] === '終助詞' )
            || ( $lword === 'ね' && $lcsv[1] === '終助詞' )
            || ( $lword === 'よ' && $lcsv[1] === '終助詞' ) ) {
            if (! isset( $parse[ $count - 6] ) ) {
                return [];
            }
            $add_last = $lword;
            $lword = $pword;
            $lcsv  = $pcsv;
            $pword = $fword;
            $pcsv  = $fcsv;
            $count_last = $count - 6;
            $fin = $parse[ $count_last ];
            list ( $fword, $fcsv ) = static::disassembly( $fin );
            $pre_text_num = $count_last;
            if ( ( $lword === 'か' && $lcsv[1] === '副助詞／並立助詞／終助詞' )
            || ( $lword === 'かい' && $lcsv[1] === '終助詞' )
            || ( $lword === 'ね' && $lcsv[1] === '終助詞' )
            || ( $lword === 'よ' && $lcsv[1] === '終助詞' ) ) {
                // 〜かね？
                if (! isset( $parse[ $count - 7] ) ) {
                    return [];
                }
                $add_last = $lword . $add_last;
                $lword = $pword;
                $lcsv  = $pcsv;
                $pword = $fword;
                $pcsv  = $fcsv;
                $count_last = $count - 7;
                $fin = $parse[ $count_last ];
                list ( $fword, $fcsv ) = static::disassembly( $fin );
                if ( isset( $parse[ $count_last -1] ) ) {
                    list ( $ffword, $ffcsv ) = static::disassembly( $parse[ $count_last - 1] );
                }
                $pre_text_num = $count_last;
            }
        }
        $pre_text = '';
        for ( $i = 1; $i < 3; $i++ ) {
            $fin = $parse[ $pre_text_num - $i ] ?? '';
            if ( strpos( $fin, "\t" ) !== false ) {
                $pre_text = explode( "\t", $fin )[0] . $pre_text;
            }
        }
        if ( $maybe ) {
            $kamoshirenai = "かもしれません{$add_last}{$end}";
            $kamoshirenai_2 = "かもしれない{$add_last}{$end}";
            $kamoshirenai_3 = "かも知れない{$add_last}{$end}";
            $kamoshirenai_4 = "かも知れません{$add_last}{$end}";
            $org_text = $text;
            $search_base = $kamoshirenai;
            if ( strpos( $org_text, $kamoshirenai_2 ) !== false ) {
                $org_text = str_replace( $kamoshirenai_2, $kamoshirenai, $org_text );
                $search_base = $kamoshirenai_2;
            } else if ( strpos( $org_text, $kamoshirenai_3 ) !== false ) {
                $org_text = str_replace( $kamoshirenai_3, $kamoshirenai, $org_text );
                $search_base = $kamoshirenai_3;
            } else if ( strpos( $org_text, $kamoshirenai_4 ) !== false ) {
                $org_text = str_replace( $kamoshirenai_4, $kamoshirenai, $org_text );
                $search_base = $kamoshirenai_4;
            }
            if ( strpos( $org_text, $kamoshirenai ) !== false ) {
                $result = $this->plugin->mecab_parse_simple( $org_text, $this->mecab, true, $app );
                // TODO::かもしれませんし、〜かもしれません。=> 後ろから処理する
                foreach ( $result as $idx => $line ) {
                    list ( $word, $csv ) = $line;
                    if ( $word === 'かも' && $csv[1] === '副助詞' ) {
                        if ( isset( $result[ $idx - 1] ) && isset( $result[ $idx + 1] ) && $result[ $idx + 1][0] === 'しれ' ) {
                            if ( isset( $result[ $idx + 2] ) && $result[ $idx + 2][0] === 'ませ' ) {
                                if ( isset( $result[ $idx + 3] ) && $result[ $idx + 3][0] === 'ん' ) {
                                    $target = $result[ $idx - 1];
                                    list ( $_prephrase, $_precsv ) = $target;
                                    $search = $_prephrase . $search_base;
                                    $change = $_precsv[4];
                                    if ( $_precsv[0] === '動詞' && $_precsv[5] === '基本形' ) {
                                        if ( $change === '一段' ) {
                                            // できるかもしれません。
                                            $replace = preg_replace( '/.$/u', 'ます', $_prephrase );
                                            $replace = "{$replace}{$add_last}{$end}";
                                            return [ $search, $replace ];
                                        } else if ( strpos( $change, '五段' ) !== false ) {
                                            // 雨が降るかもしれません。
                                            if ( strpos( $change, '行' ) !== false ) {
                                                list( $gyou, $onbin ) = explode( '行', $change );
                                                $gyou = mb_substr( $gyou, -1 );
                                                if ( isset( self::PT_CONTINUOUS_MAP[ $gyou ] ) ) {
                                                    $replace = preg_replace( '/.$/u', self::PT_CONTINUOUS_MAP[ $gyou ] . 'ます', $_prephrase );
                                                    $replace = "{$replace}{$add_last}{$end}";
                                                    return [ $search, $replace ];
                                                }
                                            }
                                        }
                                    } else if ( $_precsv[0] === '名詞' || ( $_precsv[0] === '助詞' && $_precsv[2] === '副助詞' ) ) {
                                        // あなたかもしれません。
                                        // あなただけかもしれません。
                                        // $replace = $_prephrase . 'です; // よりはっきりする
                                        // $replace = $_prephrase . 'でしょう'; // あいまい
                                        $replace = $_prephrase . 'だと思います';
                                        $replace = "{$replace}{$add_last}{$end}";
                                        return [ $search, $replace ];
                                    } else if ( $_precsv[0] === '形容詞' || $_precsv[0] === '助動詞' ) {
                                        // ないかもしれません。
                                        $replace = $_prephrase . 'と思います';
                                        $replace = "{$replace}{$add_last}{$end}";
                                        return [ $search, $replace ];
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        $intention = false;
        $search = "{$fword}{$pword}{$lword}{$add_last}{$end_word}{$end}";
        if ( $ambiguous && $lword === 'う' && $lcsv[0] === '助動詞' && $lcsv[4] === '不変化型' ) {
            $sa_intentions = self::PT_SA_INTENTIONS;
            $no_intentions = self::PT_NO_INTENTIONS;
            $post_titles = self::PT_POST_TITLES;
            $convert_ends = self::PT_CONVERT_DE_SHOU;
            foreach ( $convert_ends as $convert_end => $convert_replace ) {
                if ( strpos( $text, $convert_end ) !== false ) {
                    if ( preg_match( "/{$convert_end}{$q_end}$/u", $text ) ) {
                        $check_pre_word = $convert_replace[1] === 'イ' ? $pre_text_num - 2 : $pre_text_num - 1;
                        if ( $convert_replace[2] === 'ます' ) {
                            // 基本形＋でしょう
                            $check_pre_word += 2;
                        }
                        if ( isset( $parse[ $check_pre_word ] ) ) {
                            list ( $a_word, $a_csv ) = static::disassembly( $parse[ $check_pre_word ] );
                            if ( $convert_replace[0] === $a_csv[5] ) {
                                $change = $a_csv[4];
                                $check_pre_word++;
                                if ( $convert_replace[2] !== 'ます' && isset( $parse[ $check_pre_word ] ) ) {
                                    list( $a_end, $end_csv ) = explode( "\t", $parse[ $check_pre_word ] );
                                    $search = $convert_replace[1] === 'イ' ? $a_word . $a_end . $search : $a_word . $search;
                                }
                                $dan = null;
                                $gyou = null;
                                if ( strpos( $change, '段' ) !== false ) {
                                    list( $dan, $gtou_onbin ) = explode( '段', $change );
                                    $dan = mb_substr( $dan, -1 );
                                }
                                if ( strpos( $change, '行' ) !== false ) {
                                    list( $gyou, $onbin ) = explode( '行', $change );
                                    $gyou = mb_substr( $gyou, -1 );
                                }
                                if ( $convert_replace[2] === 'ます' ) {
                                    if ( $change === '一段' ) {
                                        // 晴れるでしょう。
                                        $phrase = preg_replace( '/.$/u', '', $a_word );
                                        $replace = $phrase . $convert_replace[2] . $end;
                                        return [ $search, $replace ];
                                    } else if ( $dan === '五' && isset( self::PT_CONTINUOUS_MAP[ $gyou ] ) ) {
                                        // 見るでしょう。
                                        $phrase = preg_replace( '/.$/u', '', $a_word );
                                        $replace = $phrase . self::PT_CONTINUOUS_MAP[ $gyou ] . $convert_replace[2] . $end;
                                        return [ $search, $replace ];
                                    }
                                } else if ( $change === 'サ変・スル' ) {
                                    // すると良いでしょう。しないでしょう。
                                    $replace = 'し' . $convert_replace[2] . $end;
                                    return [ $search, $replace ];
                                } else if ( strpos( $change, '促音便' ) !== false || in_array( $a_csv[6], $sokuonbin ) ) {
                                    if ( $convert_replace[1] === 'イ' ) {
                                        // 歌うと良いでしょう。
                                        $phrase = preg_replace( '/.$/u', 'っ', $a_word );
                                        $replace = $phrase . $convert_replace[2] . $end;
                                        return [ $search, $replace ];
                                    } else if ( isset( self::PT_CONTINUOUS_MAP[ $gyou ] ) ) {
                                        // 歌わないでしょう。
                                        $phrase = preg_replace( '/.$/u', self::PT_CONTINUOUS_MAP[ $gyou ], $a_word );
                                        $replace = $phrase . $convert_replace[2] . $end;
                                        return [ $search, $replace ];
                                    }
                                } else if ( strpos( $change, '撥音便' ) !== false || in_array( $a_csv[6], $hatsuonbin ) ) {
                                    if ( $convert_replace[1] === 'イ' ) {
                                        // 並ぶと良いでしょう。
                                        $phrase = preg_replace( '/.$/u', 'ん', $a_word );
                                        $convert_replace[2] = preg_replace( '/^て/u', 'で', $convert_replace[2] );
                                        $replace = $phrase . $convert_replace[2] . $end;
                                        return [ $search, $replace ];
                                    } else if ( isset( self::PT_CONTINUOUS_MAP[ $gyou ] ) ) {
                                        // 並ばないでしょう。
                                        $phrase = preg_replace( '/.$/u', self::PT_CONTINUOUS_MAP[ $gyou ], $a_word );
                                        $replace = $phrase . $convert_replace[2] . $end;
                                        return [ $search, $replace ];
                                    }
                                } else if ( strpos( $change, 'イ音便' ) !== false ) {
                                    if ( $convert_replace[1] === 'イ' ) {
                                        // 書くと良いでしょう。
                                        $phrase = preg_replace( '/.$/u', 'い', $a_word );
                                        $replace = $phrase . $convert_replace[2] . $end;
                                        return [ $search, $replace ];
                                    } else if ( isset( self::PT_CONTINUOUS_MAP[ $gyou ] ) ) {
                                        // 書かないでしょう。
                                        $phrase = preg_replace( '/.$/u', self::PT_CONTINUOUS_MAP[ $gyou ], $a_word );
                                        $replace = $phrase . $convert_replace[2] . $end;
                                        return [ $search, $replace ];
                                    }
                                } else {
                                    if ( $dan === '一' ) {
                                        // 見ると良いでしょう。見ないでしょう。
                                        $phrase = $convert_replace[1] === 'イ' ? preg_replace( '/.$/u', '', $a_word ) : $a_word;
                                        $replace = $phrase . $convert_replace[2] . $end;
                                        return [ $search, $replace ];
                                    } else if ( $dan === '五' && $gyou && isset( self::PT_CONTINUOUS_MAP[ $gyou ] ) ) {
                                        // 貸すと良いでしょう。貸さないでしょう。
                                        $phrase = preg_replace( '/.$/u', self::PT_CONTINUOUS_MAP[ $gyou ], $a_word );
                                        $replace = $phrase . $convert_replace[2] . $end;
                                        return [ $search, $replace ];
                                    }
                                }
                            }
                        }
                    }
                }
            }
            if ( $fword === 'し' && isset( $parse[ $count_last - 3] ) ) {
                list ( $ck_word, $ck_csv ) = explode( "\t", $parse[ $count_last - 3] );
                if ( in_array( $ck_word, $sa_intentions ) ) {
                    // 案内しましょう。招待しましょう。
                    $intention = true;
                }
            }
            if (! $intention ) {
                $intentions = $this->intentions;
                if ( strpos( $end_part, '終助詞' ) !== false ) {
                    $intentions = $personal_pronoun_1st;
                    // 1人称のみ意思表示
                    // 終助詞 => 行きましょうよ。行きましょうね。行きましょうぜ!
                }
                $you_mo = false; // あなたも
                $p_words = [];
                if ( $this->cabocha ) {
                    $target = '助詞,格助詞,一般,*,*,*,が,ガ,ガ';
                    $target2 = '助詞,係助詞,*,*,*,*,も,モ,モ';
                    $c_parse = $this->plugin->cabocha_parse( $original, $app, $app->bannedwords_mecab_dic_path );
                    $c_parse = '<!DOCTYPE html><html><body>' . $c_parse;
                    $dom = PTUtil::loadHTML( $c_parse );
                    $elements = $dom->getElementsByTagName( 'chunk' );
                    $target_match = false;
                    $link_to = null;
                    $last_id = 0;
                    $p_word = '';
                    $p2_word = '';
                    $p_child = null;
                    $p2_child = null;
                    $p3_word = '';
                    $p3_child = null;
                    if ( $elements->length ) {
                        for ( $i = 0; $i < $elements->length; $i++ ) {
                            $element = $elements->item( $i );
                            $children = $element->childNodes;
                            for ( $j = 0; $j < $children->length; $j++ ) {
                                $child = $children->item( $j );
                                if ( $child->nodeType === XML_ELEMENT_NODE ) {
                                    if ( $child->textContent === 'が' || $child->textContent === 'も' ) {
                                        $not_noun = false;
                                        if ( $child->textContent === 'も' ) {
                                            if ( $p2_child ) {
                                                $p2_feature = $p2_child->getAttribute( 'feature' );
                                                $p2_csv = explode( ',', $p2_feature );
                                                if ( $p2_csv[0] !== '名詞' ) {
                                                    // 雨が降っても...
                                                    $not_noun = true;
                                                }
                                            }
                                        }
                                        if (! $not_noun ) {
                                            $p3_csv = [];
                                            if ( $p3_child ) {
                                                $p3_feature = $p3_child->getAttribute( 'feature' );
                                                $p3_csv = explode( ',', $p3_feature );
                                            }
                                            $post_title_match = false;
                                            if ( isset( $p3_csv[1] ) && $p3_csv[1] === '固有名詞' ) {
                                                foreach ( $post_titles as $post_title ) {
                                                    if ( preg_match( "/{$post_title}$/", $p_word ) ) {
                                                        $post_title_match = true;
                                                        $intention = true;
                                                        $p_words[] = $p3_word . $p2_word . $p_word;
                                                        break;
                                                    }
                                                }
                                            }
                                            if (! $post_title_match ) {
                                                if ( in_array( $p_word, $post_titles ) && isset( $p3_csv[1] ) && $p3_csv[1] === '固有名詞' ) {
                                                    // 山田君が行きましょう。
                                                    $post_title = false;
                                                    if ( $child->textContent === 'も' ) {
                                                        foreach ( $post_titles as $post ) {
                                                            if ( preg_match( "/{$post}$/", $p_word ) ) {
                                                                $post_title = true;
                                                            }
                                                        }
                                                        $p_words[] = $p3_word . $p2_word . $p_word;
                                                    }
                                                    if (! $post_title ) {
                                                        $intention = true;
                                                    }
                                                } else if ( in_array( $p_word, $no_intentions )
                                                    || in_array( "{$p2_word}{$p_word}", $no_intentions ) ) {
                                                    // あなた達が行きましょう。
                                                    $intention = false;
                                                    if ( $child->textContent === 'も' ) {
                                                        // 彼もあなたも行きましょう。
                                                        // TODO::混在する時判別できないことがある
                                                        $you_mo = true;
                                                        $p_words[] = $p3_word . $p2_word . $p_word;
                                                    }
                                                } else {
                                                    $post_title = false;
                                                    if ( $child->textContent === 'も' ) {
                                                        foreach ( $post_titles as $post ) {
                                                            if ( preg_match( "/{$post}$/", $p_word ) ) {
                                                                $post_title = true;
                                                                break;
                                                            }
                                                        }
                                                        $p_words[] = $p3_word . $p2_word . $p_word;
                                                    }
                                                    if (! $post_title ) {
                                                        $feature = $child->getAttribute( 'feature' );
                                                        if ( $feature === $target || $feature === $target2 ) {
                                                            $proper = false;
                                                            if ( $p_child ) {
                                                                $p_feature = $p_child->getAttribute( 'feature' );
                                                                $p_feature = explode( ',', $p_feature );
                                                                if ( $p_feature[1] === '固有名詞' ) {
                                                                    $proper = true;
                                                                    $target_match = true;
                                                                    $link_to = $element->getAttribute( 'link' );
                                                                }
                                                            }
                                                            if (! $proper ) {
                                                                foreach ( $intentions as $intention_end ) {
                                                                    if ( preg_match( "/{$intention_end}$/", $p_word ) ) {
                                                                        $target_match = true;
                                                                        $link_to = $element->getAttribute( 'link' );
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    $p3_word = $p2_word;
                                    $p2_word = $p_word;
                                    $p3_child = $p2_child;
                                    $p2_child = $child;
                                    $p_child = $child;
                                    $p_word = $child->textContent;
                                }
                            }
                        }
                        $last_id = $element->getAttribute( 'id' );
                    }
                    if (! $you_mo && $target_match && $link_to !== null && $link_to == $last_id ) {
                        // 彼「が」引き起こす問題について注視していきましょう。
                        // 私が東京へ行きましょう。
                        $intention = true;
                    }
                } else {
                    if ( $original !== $text ) {
                        $parse = $this->plugin->mecab_parse( $original );
                        $count = count( $parse );
                    }
                    foreach ( $parse as $idx => $line ) {
                        if ( $line === 'EOS') {
                            continue;
                        }
                        list ( $a_word, $a_csv ) = static::disassembly( $line );
                        if ( ( $a_csv[1] === '格助詞' && $a_word === 'が' && isset( $parse[ $idx - 1] ) )
                            || ( $a_csv[1] === '係助詞' && $a_word === 'も' && isset( $parse[ $idx - 1] ) ) ) {
                            $pline = $parse[ $idx - 1];
                            list ( $p_word, $p_csv ) = static::disassembly( $pline );
                            $p2_word = '';
                            $p2_csv = [];
                            $not_noun = false;
                            if ( isset( $parse[ $idx - 2] ) ) {
                                list ( $p2_word, $p2_csv ) = static::disassembly( $parse[ $idx - 2] );
                                if ( $a_word === 'も' && $p2_csv[0] !== '名詞' ) {
                                    // 雨が降っても...
                                    $not_noun = true;
                                }
                            }
                            if (! $not_noun ) {
                                $post_title_match = false;
                                if ( isset( $p2_csv[1] ) && $p2_csv[1] === '固有名詞' ) {
                                    foreach ( $post_titles as $post_title ) {
                                        if ( preg_match( "/{$post_title}$/", $p_word ) ) {
                                            $post_title_match = true;
                                            $intention = true;
                                            break;
                                        }
                                    }
                                }
                                if (! $post_title_match ) {
                                    if ( in_array( $p_word, $post_titles ) && !empty( $p2_csv ) && $p2_csv[1] === '固有名詞' ) {
                                        // 山田君が行きましょう。
                                        $post_title = false;
                                        if ( $a_word === 'も' ) {
                                            foreach ( $post_titles as $post ) {
                                                if ( preg_match( "/{$post}$/", $p_word ) ) {
                                                    $post_title = true;
                                                    break;
                                                }
                                            }
                                        }
                                        if (! $post_title ) {
                                            $intention = true;
                                        }
                                    } else if ( in_array( $p_word, $no_intentions )
                                        || in_array( "{$p2_word}{$p_word}", $no_intentions ) ) {
                                        // あなた達が行きましょう。
                                        $intention = false;
                                        break;
                                    } else {
                                        $post_title = false;
                                        if ( $a_word === 'も' ) {
                                            foreach ( $post_titles as $post ) {
                                                if ( preg_match( "/{$post}$/", $p_word ) ) {
                                                    $post_title = true;
                                                    break;
                                                }
                                            }
                                        }
                                        if (! $post_title ) {
                                            if ( isset( $p2_csv[1] ) && $p2_csv[1] === '固有名詞' ) {
                                                $intention = true;
                                                break;
                                            } else {
                                                foreach ( $intentions as $intention_end ) {
                                                    if ( preg_match( "/{$intention_end}$/", $p_word ) ) {
                                                        $intention = true;
                                                        break;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        $gyou  = null;
        $onbin = null;
        if ( strpos( $pcsv[4], '行' ) !== false ) {
            list( $gyou, $onbin ) = explode( '行', $pcsv[4] );
            $gyou = mb_substr( $gyou, -1 );
        }
        if ( $lword === 'た' && $lcsv[4] === '特殊・タ' ) {
            if ( $pcsv[5] === '連用タ接続' && $gyou && isset( self::PT_CONTINUOUS_MAP[ $gyou ] ) ) {
                // 行った。
                $phrase = $pcsv[6];
                $phrase = preg_replace( '/.$/u', self::PT_CONTINUOUS_MAP[ $gyou ], $phrase );
                $replace = "{$fword}{$phrase}まし{$lword}{$add_last}{$end}";
                return $search !== $replace ? [ $search, $replace ] : [];
            } else if ( $pword === 'なかっ' && $pcsv[6] === 'ない' ) {
                // なかった。
                if ( $fcsv[0] === '動詞' ) {
                    $phrase = $fcsv[6];
                    $change = $fcsv[4];
                    if ( $change === 'サ変・スル' ) {
                        // しなかった。
                        $replace = "{$fword}ませんでした{$add_last}{$end}";
                        return $search !== $replace ? [ $search, $replace ] : [];
                    }
                    $dan = null;
                    $gyou = null;
                    if ( strpos( $change, '段' ) !== false ) {
                        list( $dan, $gtou_onbin ) = explode( '段', $change );
                        $dan = mb_substr( $dan, -1 );
                    }
                    if ( strpos( $change, '行' ) !== false ) {
                        list( $gyou, $onbin ) = explode( '行', $change );
                        $gyou = mb_substr( $gyou, -1 );
                    }
                    if ( $dan === '一' ) {
                        // 見なかった。
                        $phrase = preg_replace( '/.$/u', 'ませんでした', $phrase );
                        $replace = "{$phrase}{$add_last}{$end}";
                        return $search !== $replace ? [ $search, $replace ] : [];
                    } else if ( $dan === '五' && $gyou && isset( self::PT_CONTINUOUS_MAP[ $gyou ] ) ) {
                        // 上がらなかった。
                        $phrase = $fcsv[6];
                        $phrase = preg_replace( '/.$/u', self::PT_CONTINUOUS_MAP[ $gyou ], $phrase );
                        $replace = "{$phrase}ませんでした{$add_last}{$end}";
                        return $search !== $replace ? [ $search, $replace ] : [];
                    }
                } else {
                    $replace = "{$fword}ありませんでした{$add_last}{$end}";
                    return $search !== $replace ? [ $search, $replace ] : [];
                }
            } else if ( $pword === 'だっ' && $pcsv[4] === '特殊・ダ' ) {
                // 予定だった。
                $replace = "{$fword}でした{$add_last}{$end}";
                return $search !== $replace ? [ $search, $replace ] : [];
            } else if ( $pcsv[0] === '動詞' ) {
                // 表明した。
                $replace = "{$fword}{$pword}ました{$add_last}{$end}";
                return $search !== $replace ? [ $search, $replace ] : [];
            }
        } else if ( $lword === 'だ' && ( $lcsv[4] === '特殊・タ' || $lcsv[4] === '特殊・ダ' ) ) {
            if ( $pcsv[0] === '名詞' || $pcsv[0] === '副詞' || ( $pcsv[0] === '助詞' && $pcsv[1] === '接続助詞' ) ) {
                // 構えだ。そうだ。そうだよ。できるからだ。
                $search = $pre_text . $search;
                $replace = "{$pre_text}{$fword}{$pword}です{$add_last}{$end}";
                return $search !== $replace ? [ $search, $replace ] : [];
            } else if ( $pcsv[5] === '連用タ接続' && $gyou && isset( self::PT_CONTINUOUS_MAP[ $gyou ] ) ) {
                // 転んだ。
                $phrase = $pcsv[6];
                $phrase = preg_replace( '/.$/u', self::PT_CONTINUOUS_MAP[ $gyou ], $phrase );
                $replace = "{$fword}{$phrase}ました{$add_last}{$end}";
                return $search !== $replace ? [ $search, $replace ] : [];
            }
        } else if ( $lword === 'いる' && $lcsv[0] === '動詞' ) {
            $replace = "{$fword}{$pword}います{$add_last}{$end}";
            return $search !== $replace ? [ $search, $replace ] : [];
        } else if ( $lword === 'ある' && $lcsv[0] === '助動詞' ) {
            if ( $pword === 'で' && $pcsv[4] === '特殊・ダ' ) {
                $replace = "{$fword}{$pword}す{$add_last}{$end}";
                return $search !== $replace ? [ $search, $replace ] : [];
            }
            $replace = "{$fword}{$pword}あります{$add_last}{$end}";
            return $search !== $replace ? [ $search, $replace ] : [];
        } else if ( $lword === 'れる' && $lcsv[0] === '動詞' ) {
            $replace = "{$fword}{$pword}れます{$add_last}{$end}";
            return $search !== $replace ? [ $search, $replace ] : [];
        } else if ( $lword === 'せる' && $lcsv[0] === '動詞' ) {
            $replace = "{$fword}{$pword}せます{$add_last}{$end}";
            return $search !== $replace ? [ $search, $replace ] : [];
        } else if ( $lcsv[0] === '動詞' && $lcsv[1] === '自立' && $lcsv[5] === '基本形' ) {
            $change = $lcsv[4];
            $dan = null;
            $gyou = null;
            if ( strpos( $change, '段' ) !== false ) {
                list( $dan, $gtou_onbin ) = explode( '段', $change );
                $dan = mb_substr( $dan, -1 );
            }
            if ( strpos( $change, '行' ) !== false ) {
                list( $gyou, $onbin ) = explode( '行', $change );
                $gyou = mb_substr( $gyou, -1 );
            }
            $phrase = $lcsv[6];
            if ( $dan === '一' ) {
                $phrase = preg_replace( '/.$/u', 'ます', $phrase );
                $replace = "{$fword}{$pword}{$phrase}{$add_last}{$end}";
                return $search !== $replace ? [ $search, $replace ] : [];
            } else if ( $dan === '五' && $gyou && isset( self::PT_CONTINUOUS_MAP[ $gyou ] ) ) {
                $phrase = preg_replace( '/.$/u', self::PT_CONTINUOUS_MAP[ $gyou ], $phrase );
                $replace = "{$fword}{$pword}{$phrase}ます{$add_last}{$end}";
                return $search !== $replace ? [ $search, $replace ] : [];
            } else if ( $lword === 'する' && $change == 'サ変・スル' ) {
                $search = "{$fword}{$pword}する{$add_last}{$end}";
                $replace = "{$fword}{$pword}します{$add_last}{$end}";
                return [ $search, $replace ];
            }
        } else if ( $lcsv[0] === '動詞' && $lcsv[1] === '自立' && strpos( $lcsv[5], '命令' ) === 0 ) {
            $change = $lcsv[4];
            $dan = null;
            $gyou = null;
            if ( strpos( $change, '段' ) !== false ) {
                list( $dan, $gtou_onbin ) = explode( '段', $change );
                $dan = mb_substr( $dan, -1 );
            }
            if ( strpos( $change, '行' ) !== false ) {
                list( $gyou, $onbin ) = explode( '行', $change );
                $gyou = mb_substr( $gyou, -1 );
            }
            $regex = self::PT_GYOU_MAP[ $gyou ] ?? '';
            if ( strpos( $change, '促音便' ) !== false || in_array( $lcsv[6], $sokuonbin ) ) {
                // 早く行け。早く行え。
                if ( $regex ) {
                    $replace = $fword . $pword . preg_replace( $regex, 'ってください', $lword );
                    $replace .= $add_last . $end;
                    return $search !== $replace ? [ $search, $replace ] : [];
                }
            } else if ( strpos( $change, '撥音便' ) !== false || in_array( $lcsv[6], $hatsuonbin ) ) {
                // 読んでください。
                if ( $regex ) {
                    $replace = $fword . $pword . preg_replace( $regex, 'んでください', $lword );
                    $replace .= $add_last . $end;
                    return $search !== $replace ? [ $search, $replace ] : [];
                }
            } else if ( strpos( $change, 'イ音便' ) !== false ) {
                  // 早く歩け。
                  if ( $regex ) {
                      $replace = $fword . $pword . preg_replace( $regex, 'いてください', $lword );
                      $replace .= $add_last . $end;
                      return $search !== $replace ? [ $search, $replace ] : [];
                  }
            } else if ( $dan === '五' && isset( self::PT_CONTINUOUS_MAP[ $gyou ] ) && $regex ) {
                // 奇跡を起こせ。
                $replace = $fword . $pword . preg_replace( $regex, self::PT_CONTINUOUS_MAP[ $gyou ] . 'てください', $lword );
                $replace .= $add_last . $end;
                return $search !== $replace ? [ $search, $replace ] : [];
            } else if ( $lcsv[5] === '命令ｒｏ' ) {
                // 周りをよく見ろ。早くしろ。
                $replace = $fword . $pword . preg_replace( '/ろ$/', 'てください', $lword );
                $replace .= $add_last . $end;
                return $search !== $replace ? [ $search, $replace ] : [];
            } else if ( $lcsv[5] === '命令ｉ' ) {
                // こっちへ来い。
                $replace = $fword . $pword . preg_replace( '/い$/', 'てください', $lword );
                $replace .= $add_last . $end;
                return $search !== $replace ? [ $search, $replace ] : [];
            }
        } else if ( $lword === 'ない' && $lcsv[0] === '助動詞' && $lcsv[4] === '特殊・ナイ' ) {
            if ( $question && !$add_last ) {
                $add_last = 'か';
            }
            $change = $pcsv[4];
            $dan = null;
            $gyou = null;
            if ( strpos( $change, '段' ) !== false ) {
                list( $dan, $gtou_onbin ) = explode( '段', $change );
                $dan = mb_substr( $dan, -1 );
            }
            if ( strpos( $change, '行' ) !== false ) {
                list( $gyou, $onbin ) = explode( '行', $change );
                $gyou = mb_substr( $gyou, -1 );
            }
            $phrase = $pcsv[6];
            if ( $pcsv[0] === '動詞' && $dan === '一' ) {
                // 類を見ない。
                $phrase = preg_replace( '/.$/u', 'ません', $phrase );
                $replace = "{$fword}{$phrase}{$add_last}{$end}";
                return $search !== $replace ? [ $search, $replace ] : [];
            } else if ( $pcsv[0] === '動詞' && $dan === '五' && $gyou && isset( self::PT_CONTINUOUS_MAP[ $gyou ] ) ) {
                // 私は嘘をつかない。
                $phrase = preg_replace( '/.$/u', self::PT_CONTINUOUS_MAP[ $gyou ], $phrase );
                $replace = "{$fword}{$phrase}ません{$add_last}{$end}";
                return $search !== $replace ? [ $search, $replace ] : [];
            } else if ( $pcsv[0] === '助詞' ) {
                // そんなことはない。
                $replace = "{$fword}{$pword}ありません{$add_last}{$end}";
                return $search !== $replace ? [ $search, $replace ] : [];
            } else if ( $pcsv[0] === '動詞' && $pword === 'し' ) {
                // 私はそれをしない。
                $replace = "{$fword}{$pword}ません{$add_last}{$end}";
                return $search !== $replace ? [ $search, $replace ] : [];
            } else if ( $pcsv[0] === '名詞' ) {
                // そうに違いない。
                $replace = "{$fword}{$pword}ありません{$add_last}{$end}";
                return $search !== $replace ? [ $search, $replace ] : [];
            }
        } else if ( $lword === 'ない' && $lcsv[0] === '形容詞' ) {
            // 認識に相違ない。そんなことはない。
            $replace = "{$fword}{$pword}ありません{$add_last}{$end}";
            return $search !== $replace ? [ $search, $replace ] : [];
        } else if ( $lcsv[0] === '形容詞' && $lcsv[5] === '基本形' ) {
            // かわいい。美しい。
            $replace = "{$fword}{$pword}{$lword}です{$add_last}{$end}";
            return [ $search, $replace ];
        } else if ( $lcsv[0] === '名詞' && !$allow_end_nominal ) {
            if ( mb_strlen( $lword ) === strlen( $lword ) ) {
                return [];
            }
            // 体言止め
            if ( $lcsv[1] === 'サ変接続' ) {
                // を軸に検討。(or 過去形の場合「しました」)
                $replace = "{$fword}{$pword}{$lword}します{$add_last}{$end}";
                return $search !== $replace ? [ $search, $replace ] : [];
            } else if ( $lcsv[1] === '形容動詞語幹' ) {
                // 案が有力。(or 過去形の場合「でした」)
                $replace = "{$fword}{$pword}{$lword}です{$add_last}{$end}";
                return $search !== $replace ? [ $search, $replace ] : [];
            } else if ( $lword === 'の' && $add_last === 'か' && $lcsv[1] === '非自立' ) {
                // してしまうのか。
                $replace = "{$fword}{$pword}{$lword}です{$add_last}{$end}";
                return $search !== $replace ? [ $search, $replace ] : [];
            } else if ( $lcsv[1] === '一般' ) {
                // は2021年4月。
                $replace = "{$fword}{$pword}{$lword}です{$add_last}{$end}";
                return $search !== $replace ? [ $search, $replace ] : [];
            }
        } else if ( $lword === 'う' && $lcsv[0] === '助動詞' && $lcsv[4] === '不変化型' ) {
            // さぁ歩こう。
            $change = $pcsv[4];
            $dan = null;
            $gyou = null;
            $onbin = null;
            if ( strpos( $change, '段' ) !== false ) {
                list( $dan, $gtou_onbin ) = explode( '段', $change );
                $dan = mb_substr( $dan, -1 );
            }
            if ( strpos( $change, '行' ) !== false ) {
                list( $gyou, $onbin ) = explode( '行', $change );
                $gyou = mb_substr( $gyou, -1 );
            }
            if (! $onbin ) {
                if ( in_array( $pcsv[6], $sokuonbin ) ) {
                    $onbin = '促音便';
                } else if ( in_array( $pcsv[6], $hatsuonbin ) ) {
                    $onbin = '撥音便';
                }
            }
            $ma_shou = 'ましょう';
            if ( ( $ambiguous && $intention ) || $question ) {
                $ma_shou = 'ます';
                $intention = true;
                if ( $question && !$add_last ) {
                    $add_last = 'か';
                }
            } else if ( $ambiguous ) {
                $ma_shou = 'てください';
            }
            $phrase = $pcsv[6];
            if ( $pword === 'ましょ' && $ambiguous ) {
                if ( preg_match( "/ないようにしましょう{$q_end}/u", $text ) ) {
                    $reverses = array_reverse( $parse );
                    $nai = 'ない	助動詞,*,*,*,特殊・ナイ,基本形,ない,ナイ,ナイ';
                    $search_end = '';
                    foreach ( $reverses as $endIdx => $reverse ) {
                        if ( $reverse === 'EOS' ) continue;
                        list( $action, $act_csv ) = $this->disassembly( $reverse );
                        $search_end = $action . $search_end;
                        if ( $reverse === $nai && isset( $reverses[ $endIdx +1] ) ) {
                            list( $action, $act_csv ) = $this->disassembly( $reverses[ $endIdx +1] );
                            if ( $act_csv[0] === '動詞' && $act_csv[5] === '未然形' ) {
                                // 走らないようにしましょう。=> 走らないでください。
                                $search_end = $action . $search_end;
                                $replace = $action . 'ないでください'. $end;
                                return [ $search_end, $replace ];
                            } else {
                                // 忘れ物のないようにしましょう。
                                break;
                            }
                        }
                    }
                }
                $excludes = self::PT_MASHOU_EXCLUDES;
                foreach ( $excludes as $exclude ) {
                    if ( preg_match( "/{$exclude}{$end}$/", $text ) ) {
                        return [];
                    }
                }
                if ( in_array( $fword, $no_aspect ) ) {
                    $ma_shou = 'ます';
                    $intention = true;
                }
                $change = $fcsv[4];
                $dan = null;
                $gyou = null;
                $onbin = null;
                if ( strpos( $change, '段' ) !== false ) {
                    list( $dan, $gtou_onbin ) = explode( '段', $change );
                    $dan = mb_substr( $dan, -1 );
                }
                if ( strpos( $change, '行' ) !== false ) {
                    list( $gyou, $onbin ) = explode( '行', $change );
                    $gyou = mb_substr( $gyou, -1 );
                }
                if ( in_array( $fcsv[6], $sokuonbin ) ) {
                    $onbin = '促音便';
                } else if ( in_array( $fcsv[6], $hatsuonbin ) ) {
                    $onbin = '撥音便';
                }
                if ( $connector === 'し、' ) {
                    // 避難しましょうし、
                    // 明日の天気のは好転しましょうし、お出かけ日和になりましょう。
                    $replace = $ffword . $fcsv[6] . 'でしょう、';
                    $search = $ffword . $search;
                    return [ $search, $replace ];
                } else if ( $connector === 'が、' ) {
                    if ( $fcsv[5] === '連用形' ) {
                        // この試合に勝ちましょうが、負けましょうが、決勝リーグには進めません。
                        $_end = '';
                        if ( $onbin && preg_match( '/(.)音便/u', $onbin, $matchs ) ) {
                            if ( $matchs[1] === '促' ) {
                                $_end = 'っても、';
                            } else if ( $matchs[1] === '撥' ) {
                                $_end = 'んでも、';
                            }
                        }
                        if ( $_end ) {
                            $fword = preg_replace( '/.$/u', $_end, $fword );
                            $connector = '、';
                            $search = preg_replace( '/、$/u', 'が、', $search );
                            return [ $search, $fword ];
                        } else if ( $dan === '一' ) {
                            $connector = '、';
                            $search = preg_replace( '/、$/u', 'が、', $search );
                            return [ $search, $fword . 'ても、' ];
                        }
                    }
                    return [];
                }
                if (! $intention && $onbin && preg_match( '/(.)音便/u', $onbin, $matchs ) ) {
                    $fword_orig = $fword;
                    $_end = '';
                    if ( $matchs[1] === '促' ) {
                        // 行きましょう。
                        $_end = 'っ';
                    } else if ( $ma_shou === 'ます' && $matchs[1] === 'イ' && isset( self::PT_CONTINUOUS_MAP[ $gyou ] ) ) {
                        // 歌っていただきましょう。
                        $_end = self::PT_CONTINUOUS_MAP[ $gyou ];
                    } else if ( preg_match( '/^[ァ-ヴ]+$/', $matchs[1] ) ) {
                        $_end = mb_convert_kana( $matchs[1], 'c' );
                    } else if ( $matchs[1] === '撥' ) {
                        if ( $ma_shou === 'てください' ) {
                            $_end = 'ん';
                            $ma_shou = 'でください';
                        }
                    }
                    if ( $_end ) {
                        $fword = preg_replace( '/.$/u', $_end, $fword );
                    }
                }
                if ( preg_match( '/ください$/u', $ma_shou ) ) {
                    if ( $add_last === 'か' ) {
                        return [];
                    }
                }
                if ( $you_mo && !empty( $p_words ) ) {
                    foreach ( $personal_pronoun_1st as $personal ) {
                        foreach ( $p_words as $p_word ) {
                            if ( strpos( $p_word, $personal ) !== false ) {
                                // 私もあなたも東京へ行きましょう。
                                // => 私と一緒にあなたも東京へ行ってください。
                                if ( mb_substr_count( $text, $p_word ) === 1 && strpos( $text, $ma_shou ) === false
                                    && mb_substr_count( $text, $fword_orig ) === 1 ) {
                                    $replace = str_replace( "{$p_word}も", "{$p_word}と一緒に", $text );
                                    $replace = preg_replace( "/{$q_end}$/u", '', $replace );
                                    $replace = str_replace( 'ましょう', $ma_shou, $replace );
                                    $replace = str_replace( $fword_orig, $fword, $replace );
                                    $replace.= "{$add_last}{$end}";
                                    return [ $text, $replace ];
                                }
                                return [];
                            }
                        }
                    }
                }
                $replace = "{$fword}{$ma_shou}{$add_last}{$end}";
                $search = $pre_text . $search;
                $replace = $pre_text . $replace;
                return $search !== $replace ? [ $search, $replace ] : [];
            } else if ( $pcsv[0] === '動詞' && $dan === '一' ) {
                if ( preg_match( '/ください$/u', $ma_shou ) ) {
                    if ( $add_last === 'か' ) {
                        return [];
                    }
                }
                $phrase = preg_replace( '/.$/u', $ma_shou, $phrase );
                $replace = "{$fword}{$phrase}{$add_last}{$end}";
                return $search !== $replace ? [ $search, $replace ] : [];
            } else if ( $pcsv[0] === '動詞' && $dan === '五' && $gyou && isset( self::PT_CONTINUOUS_MAP[ $gyou ] ) ) {
                if ( preg_match( '/ください$/u', $ma_shou ) ) {
                    if ( $add_last === 'か' ) {
                        return [];
                    }
                }
                if ( $ma_shou === 'てください' && $onbin === 'イ音便' ) {
                    $_end = 'い';
                } else if ( $ma_shou === 'てください' && $onbin === '促音便' ) {
                    $_end = 'っ';
                } else if ( $ma_shou === 'てください' && $onbin === '撥音便' ) {
                    $_end = 'ん';
                    $ma_shou = 'でください';
                } else {
                    $_end = self::PT_CONTINUOUS_MAP[ $gyou ];
                }
                $phrase = preg_replace( '/.$/u', $_end, $phrase );
                $replace = "{$fword}{$phrase}{$ma_shou}{$add_last}{$end}";
                return $search !== $replace ? [ $search, $replace ] : [];
            } else if ( $change === 'サ変・スル' ) {
                if ( preg_match( '/ください$/u', $ma_shou ) ) {
                    if ( $add_last === 'か' ) {
                        return [];
                    }
                }
                $replace = "{$fword}し{$ma_shou}{$add_last}{$end}";
                return $search !== $replace ? [ $search, $replace ] : [];
            } else if ( $pword === 'だろ' ) {
                $replace = "{$fword}でしょう{$add_last}{$end}";
                return $search !== $replace ? [ $search, $replace ] : [];
            }
        } else if ( $lword === 'られる' ) {
            // 食べられる。
            if ( $question && !$add_last ) {
                $add_last = 'か';
            }
            $replace = "{$fword}{$pword}られます{$add_last}{$end}";
            return [ $search, $replace ];
        } else if ( ( $lword === 'ず' || $lword === 'ぬ' ) && $lcsv[4] === '特殊・ヌ' ) {
            // その夢は叶わず。
            $change = $pcsv[4];
            $dan = null;
            $gyou = null;
            if ( strpos( $change, '段' ) !== false ) {
                list( $dan, $gtou_onbin ) = explode( '段', $change );
                $dan = mb_substr( $dan, -1 );
            }
            if ( strpos( $change, '行' ) !== false ) {
                list( $gyou, $onbin ) = explode( '行', $change );
                $gyou = mb_substr( $gyou, -1 );
            }
            $phrase = $pcsv[6];
            if ( $pcsv[0] === '動詞' && $dan === '一' ) {
                $phrase = preg_replace( '/.$/u', 'ません', $phrase );
                $replace = "{$fword}{$phrase}{$add_last}{$end}";
                return $search !== $replace ? [ $search, $replace ] : [];
            } else if ( $pcsv[0] === '動詞' && $dan === '五' && $gyou && isset( self::PT_CONTINUOUS_MAP[ $gyou ] ) ) {
                $phrase = preg_replace( '/.$/u', self::PT_CONTINUOUS_MAP[ $gyou ], $phrase );
                $replace = "{$fword}{$phrase}ません{$add_last}{$end}";
                return $search !== $replace ? [ $search, $replace ] : [];
            }
        }
        if ( $remove_final_particle ) {
            $search = $pre_text . $search;
            $replace = preg_replace( "/{$end_word}{$q_end}$/u", $end, $search );
            // 文末がでしょう、ましょうになるとき、再処理
            return $search !== $replace ? [ $search, $replace ] : [];
        }
        return [];
    }

    static function disassembly ( $line ) {
        list ( $word, $csv ) = explode( "\t", $line );
        $csv = explode( ',', $csv );
        return [ $word, $csv ];
    }
}