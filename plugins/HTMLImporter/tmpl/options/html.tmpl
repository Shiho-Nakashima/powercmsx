<div class="row form-group">
  <div class="col-lg-12 form-inline form-inline-left-margin">
    <label class="custom-control custom-radio">
      <input class="custom-control-input" type="radio" name="html_import_type" value="zip" checked>
      <span class="custom-control-indicator"></span>
      <span class="custom-control-description"><mt:trans phrase="Zip Archive" component="HTMLImporter"></span>
    </label>
    <label class="custom-control custom-radio">
      <input class="custom-control-input" type="radio" name="html_import_type" value="url">
      <span class="custom-control-indicator"></span>
      <span class="custom-control-description"><mt:trans phrase="URLs" component="HTMLImporter"></span>
    </label>
  </div>
</div>
<div class="row form-group" id="zip-hint">
  <div class="col-lg-12 mt-0">
  <p class="text-muted hint-block mt-0">
    <i class="fa fa-question-circle-o" aria-hidden="true"></i>
    <span class="sr-only"><mt:trans phrase="Hint"></span>
    <span>
      <mt:trans phrase="The root directory of the ZIP archive is ignored. When creating a hierarchy, create a directory under the root directory and store the content files there." component="HTMLImporter">
    </span>
  </p>
  </div>
</div>
<div class="html_url-wrapper">
<hr>
<div class="alert alert-success hidden" id="upload-urls" role="alert" tabindex="0">
  <span id="urls-alert-message"></span>
</div>
<label for="html_importer_send_urls"><mt:trans phrase="URLs" component="HTMLImporter"></label>
<textarea id="html_importer_send_urls" name="html_importer_send_urls" rows="6" class="form-control watch-changed" placeholder="<mt:trans phrase="Write 1 line 1 URL." component="HTMLImporter">"></textarea>
<div class="mt-2" style="margin-left:-6px;margin-right:4px;">
<button class="btn btn-primary full" type="button" id="html_importer_send_urls-button"><mt:trans phrase="Send" component="HTMLImporter"></button>
</div>
</div>
<div class="html_url-wrapper">
<hr>
<div class="alert alert-success hidden" id="html_settings-alert" role="alert" tabindex="0">
  <button onclick="$('#html_settings-alert').hide();" type="button" class="close" aria-label="<mt:trans phrase="Close">">
    <span aria-hidden="true">&times;</span>
  </button>
  <span id="html_settings-alert-message"></span>
</div>
<div class="row form-group mt-4">
  <div class="col-lg-2 mt-1">
    <mt:trans phrase="HTTP Authentication" component="HTMLImporter">
  </div>
  <div class="col-lg-10 form-inline form-inline-left-margin">
    <label><mt:trans phrase="Username"> : &nbsp;<input type="text" class="form-control watch-changed very-short" name="html_auth_user" id="html_auth_user"></label>
    <label><mt:trans phrase="Password"> : &nbsp;<input type="password" class="form-control watch-changed very-short" name="html_auth_pwd" id="html_auth_pwd"></label>
<mt:if tag="property" name="htmlimporter_use_curl">
&nbsp;
    <label class="custom-control custom-checkbox">
    <input class="custom-control-input watch-changed"
     type="checkbox" name="html_digest_auth" id="html_digest_auth" value="1" >
        <span class="custom-control-indicator"></span>
        <span class="custom-control-description"> 
        <mt:trans phrase="Digest Access Authentication" component="HTMLImporter"></span>
    </label>
</mt:if>
  </div>
</div>
</div>
<hr>
<div class="row form-group">
  <div class="col-lg-12">
  <label for="html_preprocessing"><mt:trans phrase="Preprocessing" component="HTMLImporter"> ( <mt:trans phrase="Delete"> )</label>
  <textarea id="html_preprocessing" name="html_preprocessing" rows="3" class="form-control watch-changed"
    placeholder="<mt:trans phrase="Describe the point to be delete by Simple string, Regular expression, XPath or CSS selector." component="HTMLImporter">"
    ></textarea>
    <p class="text-muted hint-block">
      <i class="fa fa-question-circle-o" aria-hidden="true"></i>
      <span class="sr-only"><mt:trans phrase="Hint"></span>
      <mt:trans phrase="Write 1 line 1 setting. You can set the value by specifying the column name on the right side with =." component="HTMLImporter">
      <mt:trans phrase="Deletion is done immediately after getting the HTML. The HTML structure may change." component="HTMLImporter">
    </p>
  <label for="html_preprocessing_replace"><mt:trans phrase="Preprocessing" component="HTMLImporter"> ( <mt:trans phrase="Replace"> )</label>
  <textarea id="html_preprocessing_replace" name="html_preprocessing_replace" rows="3" class="form-control watch-changed"
    placeholder="<mt:trans phrase="Describe the point to be replace by Simple string, Regular expression, XPath or CSS selector and replacement pattern or string in CSV." component="HTMLImporter">"
    ></textarea>
    <div class="alert alert-warning mt-2" role="alert">
      <mt:trans phrase="Use '!' As a regular expression delimiter to distinguish regular expressions from XPath." component="HTMLImporter">
    </div>
  </div>
</div>
<div class="row form-group mt-4">
  <div class="col-lg-2 mt-1" id="html_title-label">
    <mt:trans phrase="Title">
  </div>
  <style>
  #html_title_perttern-wrapper .custom-radio{ margin-right: -5px }
  </style>
  <div class="col-lg-10 form-inline form-inline-left-margin" id="html_title_perttern-wrapper">
    <label class="custom-control custom-radio">
      <input class="custom-control-input" type="radio" name="html_title_perttern" value="heading" checked>
      <span class="custom-control-indicator"></span>
      <span class="custom-control-description"><mt:trans phrase="First heading" component="HTMLImporter"></span>
    </label>
    <label class="custom-control custom-radio">
      <input class="custom-control-input" type="radio" name="html_title_perttern" value="title">
      <span class="custom-control-indicator"></span>
      <span class="custom-control-description"><mt:trans phrase="Title element" component="HTMLImporter"></span>
    </label>
    <label class="custom-control custom-radio">
      <input class="custom-control-input" type="radio" name="html_title_perttern" value="start_end">
      <span class="custom-control-indicator"></span>
      <span class="custom-control-description"><mt:trans phrase="Specify start and end" component="HTMLImporter"></span>
    </label>
    <label class="custom-control custom-radio">
      <input class="custom-control-input" type="radio" name="html_title_perttern" value="regex">
      <span class="custom-control-indicator"></span>
      <span class="custom-control-description"><mt:trans phrase="Regular expression" component="HTMLImporter"></span>
    </label>
    <label class="custom-control custom-radio">
      <input class="custom-control-input" type="radio" name="html_title_perttern" value="xpath">
      <span class="custom-control-indicator"></span>
      <span class="custom-control-description"><mt:trans phrase="XPath" component="HTMLImporter"></span>
    </label>
    <mt:if name="html_can_css">
    <label class="custom-control custom-radio">
      <input class="custom-control-input" type="radio" name="html_title_perttern" value="css">
      <span class="custom-control-indicator"></span>
      <span class="custom-control-description"><mt:trans phrase="CSS Selector" component="HTMLImporter"></span>
    </label>
    </mt:if>
  </div>
</div>
<div class="row form-group mt-1" id="html_remove_title-wrapper">
  <div class="col-lg-2 mt-2"></div>
  <div class="col-lg-10">
    <label class="custom-control custom-checkbox">
    <input class="custom-control-input watch-changed"
     type="checkbox" name="html_remove_title" id="html_remove_title" value="1" >
        <span class="custom-control-indicator"></span>
        <span class="custom-control-description"> 
        <mt:trans phrase="Remove title from other columns" component="HTMLImporter"></span>
    </label>
  </div>
</div>
<div class="row form-group mt-2" id="html_title_option-wrapper">
  <div class="col-lg-2 mt-2" id="html_title_option-label">
    <label for="html_title_option"><mt:trans phrase="Separator" component="HTMLImporter"></label>
  </div>
  <div class="col-lg-10">
    <input type="text" class="form-control short watch-changed" name="html_title_option" id="html_title_option">
  <p class="text-muted hint-block">
    <i class="fa fa-question-circle-o" aria-hidden="true"></i>
    <span class="sr-only"><mt:trans phrase="Hint"></span>
    <span id="html_title_option-hint">
      <mt:trans phrase="Enter the start and end points separated by comma." component="HTMLImporter">
    </span>
  </p>
  </div>
</div>
<div class="row form-group mt-4" id="html_meta-wrapper">
  <div class="col-lg-2">
    <mt:trans phrase="Meta Tags" component="HTMLImporter">
  </div>
  <div class="col-lg-10">
    <label class="custom-control custom-checkbox" id="html_meta_description-label">
    <input class="custom-control-input watch-changed"
     type="checkbox" name="html_meta_description" id="html_meta_description" value="1" >
        <span class="custom-control-indicator"></span>
        <span class="custom-control-description"> 
        <span id="html_meta_description-text">
          <mt:trans phrase="'description' to excerpt" component="HTMLImporter"></span>
        </span>
    </label>
    <label class="custom-control custom-checkbox" id="html_meta_keywords-label">
    <input class="custom-control-input watch-changed"
     type="checkbox" name="html_meta_keywords" id="html_meta_keywords" value="1" >
        <span class="custom-control-indicator"></span>
        <span class="custom-control-description"> 
        <mt:trans phrase="'keywords' to keywords" component="HTMLImporter"></span>
    </label>
    <label class="custom-control custom-checkbox" id="html_meta_tags-label">
    <input class="custom-control-input watch-changed"
     type="checkbox" name="html_meta_tags" id="html_meta_tags" value="1" >
        <span class="custom-control-indicator"></span>
        <span class="custom-control-description"> 
        <mt:trans phrase="'keywords' to tags" component="HTMLImporter"></span>
    </label>
    <mt:if name="html_can_asset">
    <label class="custom-control custom-checkbox" id="html_meta_ogimage-label">
    <input class="custom-control-input watch-changed"
     type="checkbox" name="html_meta_ogimage" id="html_meta_ogimage" value="1" >
        <span class="custom-control-indicator"></span>
        <span class="custom-control-description"> 
        <mt:trans phrase="'og:image' to asset" component="HTMLImporter"></span>
    </label>
    </mt:if>
  </div>
</div>
<div class="row form-group html_body-wrapper">
  <div class="col-lg-2" id="html_body-label">
    <mt:trans phrase="Body">
  </div>
  <div class="col-lg-10 form-inline form-inline-left-margin">
    <label class="custom-control custom-radio">
      <input class="custom-control-input watch-changed" type="radio" name="html_body_perttern" value="auto" checked>
      <span class="custom-control-indicator"></span>
      <span class="custom-control-description"><mt:trans phrase="Automatic extraction" component="HTMLImporter"></span>
    </label>
    <label class="custom-control custom-radio">
      <input class="custom-control-input watch-changed" type="radio" name="html_body_perttern" value="start_end" checked>
      <span class="custom-control-indicator"></span>
      <span class="custom-control-description"><mt:trans phrase="Specify start and end" component="HTMLImporter"></span>
    </label>
    <label class="custom-control custom-radio">
      <input class="custom-control-input watch-changed" type="radio" name="html_body_perttern" value="regex">
      <span class="custom-control-indicator"></span>
      <span class="custom-control-description"><mt:trans phrase="Regular expression" component="HTMLImporter"></span>
    </label>
    <label class="custom-control custom-radio">
      <input class="custom-control-input watch-changed" type="radio" name="html_body_perttern" value="xpath">
      <span class="custom-control-indicator"></span>
      <span class="custom-control-description"><mt:trans phrase="XPath"></span>
    </label>
    <mt:if name="html_can_css">
    <label class="custom-control custom-radio">
      <input class="custom-control-input watch-changed" type="radio" name="html_body_perttern" value="css">
      <span class="custom-control-indicator"></span>
      <span class="custom-control-description"><mt:trans phrase="CSS Selectors" component="HTMLImporter"></span>
    </label>
    </mt:if>
    <label class="custom-control custom-radio">
      <input class="custom-control-input watch-changed" type="radio" name="html_body_perttern" value="all_html">
      <span class="custom-control-indicator"></span>
      <span class="custom-control-description"><mt:trans phrase="All HTML" component="HTMLImporter"></span>
    </label>
  </div>
</div>
<div class="row form-group mt-2" id="html_body_option-wrapper">
  <div class="col-lg-2 mt-2" id="html_body_option-label">
    <label for="body_option"><mt:trans phrase="Start and End" component="HTMLImporter"></label>
  </div>
  <div class="col-lg-10">
    <input type="text" class="form-control short watch-changed" name="html_body_option" id="html_body_option">
  <p class="text-muted hint-block">
    <i class="fa fa-question-circle-o" aria-hidden="true"></i>
    <span class="sr-only"><mt:trans phrase="Hint"></span>
    <span id="html_body_option-hint">
      <mt:trans phrase="Enter the start and end points separated by comma." component="HTMLImporter">
    </span>
  </p>
  </div>
</div>
<div class="row form-group">
  <div class="col-lg-12">
  <label for="html_field_settings"><mt:trans phrase="Other Columns" component="HTMLImporter"></label>
  <textarea id="html_field_settings" name="html_field_settings" rows="3" class="form-control watch-changed"
    placeholder="<mt:if name="html_can_css"><mt:trans phrase="column_name=Start,End or column_name=Regular expression or column_name=XPath or column_name=CSS Selector" component="HTMLImporter"><mt:else><mt:trans phrase="column_name=Start,End or column_name=Regular expression or column_name=XPath" component="HTMLImporter"></mt:if>"
    ></textarea>
    <div class="alert alert-warning mt-2" role="alert">
      <mt:trans phrase="Use '!' As a regular expression delimiter to distinguish regular expressions from XPath." component="HTMLImporter">
    </div>
    <p class="text-muted hint-block">
      <i class="fa fa-question-circle-o" aria-hidden="true"></i>
      <span class="sr-only"><mt:trans phrase="Hint"></span>
      <mt:trans phrase="Write 1 line 1 setting. PowerCMS X's column name=Start,End or column name=Regular expression or column name=XPath(When specified multiple times, the values are merged) or name=CSS Selector(When specified multiple times, the values are merged.Only a single designation)." component="HTMLImporter">
      <mt:trans phrase="You can use template tags. Branching is possible with the template variable 'url' or 'html'." component="HTMLImporter">
    </p>
  </div>
</div>
<hr>
<div class="row form-group" id="html_text_format-wrapper">
  <div class="col-lg-2 mt-1">
    <mt:trans phrase="Text Format">
  </div>
  <div class="col-lg-10">
  <select id="html_text_format" name="html_text_format" class="form-control custom-select short watch-changed">
    <option value=""><mt:trans phrase="None"></option>
    <option value="convert_breaks"><mt:trans phrase="Convert Line Breaks"></option>
    <option value="markdown"><mt:trans phrase="Markdown"></option>
    <mt:ignore><option value="markdown_with_smartypants">Markdown + SmartyPants</option></mt:ignore>
    <option value="richtext"><mt:trans phrase="RichText"></option>
    <mt:ignore><option value="textile_2" <mt:if name="object_text_format" eq="textile_2">selected</mt:if>><mt:trans phrase="Textile 2"></option></mt:ignore>
  </select>
  </div>
</div>
<div class="row form-group">
  <div class="col-lg-2">
    <mt:trans phrase="Other" component="HTMLImporter">
  </div>
  <div class="col-lg-10">
    <label class="custom-control custom-checkbox" id="html_create_categories-label">
    <input class="custom-control-input watch-changed"
     type="checkbox" name="html_create_categories" id="html_create_categories" value="1">
        <span class="custom-control-indicator"></span>
        <span class="custom-control-description"> 
        <mt:trans phrase="Create Categories or Folders from path" component="HTMLImporter"></span>
    </label>
    <label class="custom-control custom-checkbox">
    <input class="custom-control-input watch-changed"
     type="checkbox" name="html_overwrite_same" id="html_overwrite_same" value="1">
        <span class="custom-control-indicator"></span>
        <span class="custom-control-description"> 
        <mt:trans phrase="Overwrite the same URL" component="HTMLImporter"></span>
    </label>
    <label class="custom-control custom-checkbox">
    <input class="custom-control-input watch-changed"
     type="checkbox" name="html_minifying_html" id="html_minifying_html" value="1">
        <span class="custom-control-indicator"></span>
        <span class="custom-control-description"> 
        <mt:trans phrase="Minifying the HTML" component="HTMLImporter"></span>
    </label>
    <mt:if name="html_can_asset">
    <label class="custom-control custom-checkbox">
    <input class="custom-control-input watch-changed"
     type="checkbox" name="html_import_assets" id="html_import_assets" value="1">
        <span class="custom-control-indicator"></span>
        <span class="custom-control-description"> 
        <mt:trans phrase="Import Assets" component="HTMLImporter"></span>
    </label>
    <label class="custom-control custom-checkbox">
    <input class="custom-control-input watch-changed"
     type="checkbox" name="html_js_to_asset" id="html_js_to_asset" value="1">
        <span class="custom-control-indicator"></span>
        <span class="custom-control-description"> 
        <mt:trans phrase="'.js' files to Asset" component="HTMLImporter"></span>
    </label>
    <label class="custom-control custom-checkbox">
    <input class="custom-control-input watch-changed"
     type="checkbox" name="html_css_to_asset" id="html_css_to_asset" value="1">
        <span class="custom-control-indicator"></span>
        <span class="custom-control-description"> 
        <mt:trans phrase="'.css' files to Asset" component="HTMLImporter"></span>
    </label>

    </mt:if>
    <label class="custom-control custom-checkbox">
    <input class="custom-control-input watch-changed"
     type="checkbox" name="html_create_report" value="1" id="html_create_report">
        <span class="custom-control-indicator"></span>
        <span class="custom-control-description"> 
        <mt:trans phrase="Create a Report" component="HTMLImporter"></span>
    </label>
    <label class="custom-control custom-checkbox">
    <input class="custom-control-input watch-changed"
     type="checkbox" name="html_remember_me" value="1" id="html_remember_me">
        <span class="custom-control-indicator"></span>
        <span class="custom-control-description"> 
        <mt:trans phrase="Remember this Settings" component="HTMLImporter"></span>
    </label>
    <div id="html_asset_exts-wrapper" class="hidden">
      <label for="html_asset_exts">
      <span style="color:gray; font-size:70%"><i class="fa fa-asterisk" aria-hidden="true"></i></span>
      <mt:trans phrase="File extensions to import other than images" component="HTMLImporter"></label>
      <input type="text" class="form-control watch-changed" name="html_asset_exts" id="html_asset_exts">
      <p class="text-muted hint-block">
        <i class="fa fa-question-circle-o" aria-hidden="true"></i>
        <span class="sr-only"><mt:trans phrase="Hint"></span>
          <mt:trans phrase="Enter the extensions separated by comma." component="HTMLImporter">
      </p>
    </div>
  </div>
</div>
<div class="row form-group">
  <div class="col-lg-2 mt-1">
    <label for="html_identifier">
    <mt:trans phrase="Identifier">
    </label>
  </div>
  <div class="col-lg-10">
    <input type="text" class="form-control watch-changed" name="html_identifier" id="html_identifier"> 
    <p class="text-muted hint-block">
      <i class="fa fa-question-circle-o" aria-hidden="true"></i>
      <span class="sr-only"><mt:trans phrase="Hint"></span>
      <span>
        <mt:trans phrase="If necessary, enter a name for identification by plug-ins, etc." component="HTMLImporter">
      </span>
    </p>
  </div>
</div>
<hr>
<div class="row form-group">
  <div class="col-lg-3 mt-2 ml-1">
  <select class="form-control custom-select full" id="html_setting_selector" aria-label="<mt:trans phrase="HTML Import Settings" component="HTMLImporter">">
    <option><mt:trans phrase="(None selected)"></option>
  </select>
  </div>
  <div class="col-lg-2 mt-2 ml-0" style="margin-left:-5px; margin-right:3px;">
    <button class="btn btn-info full" type="button" id="html_importer_apply-settings-button"><mt:trans phrase="Apply Setting" component="HTMLImporter"></button>
  </div>
  <div class="col-lg-2 mt-2 ml-0" style="margin-left:-5px; margin-right:3px;">
    <button class="btn btn-danger full" type="button" id="html_importer_delete-settings-button"><mt:trans phrase="Delete Setting" component="HTMLImporter"></button>
  </div>
  <div class="col-lg-2 mt-2 ml-0" style="margin-left:-5px; margin-right:3px;">
    <button class="btn btn-secondary full" type="button" id="html_importer_save-settings-button"><mt:trans phrase="Save Setting" component="HTMLImporter"></button>
  </div>
  <div class="col-lg-2 mt-2 ml-0" style="margin-left:-5px; margin-right:3px;">
    <button class="btn btn-secondary full" type="button" id="html_importer_export-settings-button"><mt:trans phrase="Export"></button>
  </div>
</div>
<input type="hidden" name="html_importer_setting_name" id="html_importer_setting_name">
<script>
var html_models_mapping = <mt:var name="html_models_mapping">
$('#html_importer_apply-settings-button').click(function(){
    let setting_name = $('#html_setting_selector').val();
    if (! setting_name ) {
        alert( '<mt:trans phrase="No setting name selected." component="HTMLImporter">' );
        return false;
    }
    if (! confirm('<mt:trans phrase="Are you sure you want to apply the settings?" component="HTMLImporter">') ) {
        return false;
    }
    let data = {
        model: $('input[name="import_model"]:checked').val(),
        name: setting_name,
        mode: 'apply',
        workspace_id: '<mt:var name="workspace_id">',
        magic_token : '<mt:var name="magic_token">'
    };
    $.ajax({
        url: '<mt:var name="script_uri">?__mode=html_importer_apply_settings',
        type: 'POST',
        data: JSON.stringify( data ),
        contentType: 'application/json',
        dataType: 'json',
        timeout: 5000,
        success: function( responce ){
            if ( responce.message ) {
                alert( responce.message );
            } else {
                $(':checkbox').each(function() {
                    let item_name = $(this).attr('name');
                    if ( item_name.match( /^html_/ ) ) {
                        $(this).prop( 'checked', false );
                    }
                });
                for ( let key in responce ) {
                    let control = $('[name="' + key + '"]');
                    let control_type = control.attr('type');
                    if ( control_type === 'checkbox' ) {
                        if ( responce[ key ] ) {
                            control.prop( 'checked', true );
                        } else {
                            control.prop( 'checked', false );
                        }
                        if ( key === 'html_import_assets' ) {
                            if ( responce[ key ] ) {
                                $('#html_asset_exts-wrapper').show();
                            } else {
                                $('#html_asset_exts-wrapper').hide();
                            }
                        }
                    } else if ( control_type === 'radio' ) {
                        control.val( [ responce[ key ] ] );
                        if ( key === 'html_title_perttern' ) {
                            if ( responce[ key ] == 'heading' ) {
                                $('#html_title_option-wrapper').hide();
                            } else {
                                $('#html_title_option-wrapper').show();
                                if ( responce[ key ] == 'regex' ) {
                                    $('#html_title_option-label').html( '<span><mt:trans phrase="Pattern" component="HTMLImporter"></span>' );
                                    $('#html_title_option-hint').html( "<span><mt:trans phrase="Specify the range to be extracted with ()." component="HTMLImporter"> <mt:trans phrase="You can use template tags. Branching is possible with the template variable 'url' or 'html'." component="HTMLImporter"></span>" );
                                } else if ( responce[ key ] == 'start_end' ) {
                                    $('#html_title_option-label').html( '<span><mt:trans phrase="Start and End" component="HTMLImporter"></span>' );
                                    $('#html_title_option-hint').html( "<span><mt:trans phrase="Enter the start and end points separated by comma." component="HTMLImporter"> <mt:trans phrase="You can use template tags. Branching is possible with the template variable 'url' or 'html'." component="HTMLImporter"></span>" );
                                } else if ( responce[ key ] == 'title' ) {
                                    $('#html_title_option-label').html( '<span><mt:trans phrase="Separator" component="HTMLImporter"></span>' );
                                    $('#html_title_option-hint').html( "<span><mt:trans phrase="If you enter it, the text before this character will be the title." component="HTMLImporter"> <mt:trans phrase="You can specify multiple options by separating them with commas." component="HTMLImporter"> <mt:trans phrase="You can use template tags. Branching is possible with the template variable 'url' or 'html'." component="HTMLImporter"></span>" );
                                } else if ( responce[ key ] == 'xpath' ) {
                                    $('#html_title_option-label').html( '<span><mt:trans phrase="XPath" component="HTMLImporter"></span>' );
                                    $('#html_title_option-hint').html( "<span><mt:trans phrase="Specify the XPath. ex. /html/body/h1" component="HTMLImporter"> <mt:trans phrase="You can use template tags. Branching is possible with the template variable 'url' or 'html'." component="HTMLImporter"></span>" );
                                } else if ( responce[ key ] == 'css' ) {
                                    $('#html_title_option-label').html( '<span><mt:trans phrase="CSS Selector" component="HTMLImporter"></span>' );
                                    $('#html_title_option-hint').html( "<span><mt:trans phrase="CSS Selector. ex. h1" component="HTMLImporter"> <mt:trans phrase="You can use template tags. Branching is possible with the template variable 'url' or 'html'." component="HTMLImporter"></span>" );
                                }
                            }
                        } else if ( key === 'html_body_perttern' ) {
                            if ( responce[ key ] == 'regex' ) {
                                $('#html_body_option-wrapper').show();
                                $('#html_body_option').focus();
                                $('#html_body_option-label').html( '<span><mt:trans phrase="Pattern" component="HTMLImporter"></span>' );
                                $('#html_body_option-hint').html( "<span><mt:trans phrase="Specify the range to be extracted with ()." component="HTMLImporter"> <mt:trans phrase="You can use template tags. Branching is possible with the template variable 'url' or 'html'." component="HTMLImporter"></span>" );
                            } else if ( responce[ key ] == 'start_end' ) {
                                $('#html_body_option-wrapper').show();
                                $('#html_body_option').focus();
                                $('#html_body_option-label').html( '<span><mt:trans phrase="Start and End" component="HTMLImporter"></span>' );
                                $('#html_body_option-hint').html( "<span><mt:trans phrase="Enter the start and end points separated by comma." component="HTMLImporter"> <mt:trans phrase="You can use template tags. Branching is possible with the template variable 'url' or 'html'." component="HTMLImporter"></span>" );
                            } else if ( responce[ key ] == 'xpath' ) {
                                $('#html_body_option-wrapper').show();
                                $('#html_body_option').focus();
                                $('#html_body_option-label').html( '<span><mt:trans phrase="XPath" component="HTMLImporter"></span>' );
                                $('#html_body_option-hint').html( "<span><mt:trans phrase="Specify the XPath. ex. /html/body/main" component="HTMLImporter"> <mt:trans phrase="You can use template tags. Branching is possible with the template variable 'url' or 'html'." component="HTMLImporter"></span>" );
                            } else if ( responce[ key ] == 'css' ) {
                                $('#html_body_option-wrapper').show();
                                $('#html_body_option').focus();
                                $('#html_body_option-label').html( '<span><mt:trans phrase="CSS Selectors" component="HTMLImporter"></span>' );
                                $('#html_body_option-hint').html( "<span><mt:trans phrase="CSS Selectors separated by comma. ex. #main_content" component="HTMLImporter"> <mt:trans phrase="You can use template tags. Branching is possible with the template variable 'url' or 'html'." component="HTMLImporter"></span>" );
                            } else if ( responce[ key ] == 'auto' ) {
                                $('#html_body_option-wrapper').hide();
                            }
                        }
                    } else {
                        control.val( responce[ key ] );
                    }
                }
                $('#html_settings-alert').show();
                $('#html_settings-alert-message').html('<mt:trans phrase="Your settings have been applied successfully." component="HTMLImporter">');
                $('#html_settings-alert').focus();
            }
        },
        error: function(){
            alert( '<mt:trans phrase="An error occurred while get settings." component="HTMLImporter">' );
        }
    });
});
$('#html_importer_delete-settings-button').click(function(){
    let setting_name = $('#html_setting_selector').val();
    if (! setting_name ) {
        alert( '<mt:trans phrase="No setting name selected." component="HTMLImporter">' );
        return false;
    }
    if (! confirm('<mt:trans phrase="Are you sure you want to delete the settings?" component="HTMLImporter">') ) {
        return false;
    }
    let data = {
        model: $('input[name="import_model"]:checked').val(),
        name: setting_name,
        mode: 'delete',
        workspace_id: '<mt:var name="workspace_id">',
        magic_token : '<mt:var name="magic_token">'
    };
    $.ajax({
        url: '<mt:var name="script_uri">?__mode=html_importer_apply_settings',
        type: 'POST',
        data: JSON.stringify( data ),
        contentType: 'application/json',
        dataType: 'json',
        timeout: 5000,
        success: function( responce ){
            if ( responce.message ) {
                alert( responce.message );
            } else {
                $('#html_settings-alert').show();
                $('#html_settings-alert-message').html('<mt:trans phrase="Your settings have been deleted successfully." component="HTMLImporter">');
                $('#html_settings-alert').focus();
                html_importer_get_settings( $('input[name="import_model"]:checked').val() );
            }
        },
        error: function(){
            alert( '<mt:trans phrase="An error occurred while delete settings." component="HTMLImporter">' );
        }
    });
});
$('#html_importer_save-settings-button').click(function(){
    let current = $('#html_setting_selector').val();
    let setting_name = prompt('<mt:trans phrase="Enter name of this Settings." component="HTMLImporter">', current );
    if (! setting_name ) {
        return false;
    }
    let children = $('#html_setting_selector').children('option');
    for (let i=0; i < children.length; i++) {
        if ( children.eq(i).text() === setting_name ) {
            if (! confirm('<mt:trans phrase="A setting with the same name already exists. Are you sure you want to overwrite the settings?" component="HTMLImporter">') ) {
                return false;
            }
        }
    }
    $('#html_importer_setting_name').val( setting_name );
    let html_settings = $("#import-form").serializeArray();
    let html_settings_json = JSON.stringify( html_settings );
    $.ajax({
        url: '<mt:var name="script_uri">?__mode=html_importer_save_settings',
        type: 'POST',
        data: html_settings_json,
        dataType: 'json',
        timeout: 5000,
        success: function( responce ){
            if ( responce.message ) {
                alert( responce.message );
            } else {
                $('#html_settings-alert').show();
                $('#html_settings-alert-message').html('<mt:trans phrase="Your settings have been saved successfully." component="HTMLImporter">');
                $('#html_settings-alert').focus();
                html_importer_get_settings( $('input[name="import_model"]:checked').val() );
            }
        },
        error: function(){
            alert( '<mt:trans phrase="An error occurred while save settings." component="HTMLImporter">' );
        }
    });
});
$('#html_importer_export-settings-button').click(function(){
    let setting_name = $('#html_setting_selector').val();
    if (! setting_name ) {
        alert( '<mt:trans phrase="No setting name selected." component="HTMLImporter">' );
        return false;
    }
    if (! window.confirm( '<mt:trans phrase="Are you sure you want to export the settings?" component="HTMLImporter">' ) ) {
        return false;
    }
    let data = {
        model: $('input[name="import_model"]:checked').val(),
        name: setting_name,
        workspace_id: '<mt:var name="workspace_id">',
        magic_token : '<mt:var name="magic_token">'
    };
    $.ajax({
        url: '<mt:var name="script_uri">?__mode=html_importer_export_settings',
        type: 'POST',
        data: JSON.stringify( data ),
        contentType: 'application/json',
        dataType: 'json',
        timeout: 5000,
        success: function( responce ){
            if ( responce.message ) {
                alert( responce.message );
            } else {
                let session = responce.session;
                let contentChanged = editContentChanged;
                editContentChanged = false;
                window.location.href = '<mt:var name="script_uri">?__mode=html_importer_export_settings&session=' + session;
                editContentChanged = contentChanged;
            }
        },
        error: function(){
            alert( '<mt:trans phrase="An error occurred while get settings." component="HTMLImporter">' );
        }
    });
});
$('input[name="html_import_type"]').change(function(){
    if ( $(this).val() == 'url' ) {
        $('#fileupload-wrapper').hide();
        $('#zip-hint').hide();
        $('.html_url-wrapper').show();
        $('#html_importer_send_urls').focus();
    } else {
        $('#fileupload-wrapper').show();
        $('#zip-hint').show();
        $('.html_url-wrapper').hide();
    }
});
html_change_model();
$('input[name="import_model"]').change(function(){
    html_change_model();
    return true;
});
function html_change_model () {
    var selectedModel = $('input[name="import_model"]:checked').val();
    html_importer_get_settings( selectedModel );
    var show_meta = false;
    var settings = html_models_mapping[selectedModel];
    if (! settings ) {
        return;
    }
    $('#html_title-label').html( '<span>' + settings.primary + '</span>' );
    if (! settings.body ) {
        $('.html_body-wrapper').hide();
    } else {
        $('.html_body-wrapper').show();
        $('#html_body-label').html( '<span>' + settings.body + '</span>' );
    }
    if ( settings.taggable == true ) {
        $('#html_meta_tags-label').show();
        show_meta = true;
    } else {
        $('#html_meta_tags-label').hide();
    }
    if ( settings.excerpt == false ) {
        $('#html_meta_description-label').hide();
    } else {
        show_meta = true;
        $('#html_meta_description-label').show();
        if ( settings.excerpt == 'description' ) {
            $('#html_meta_description-text').html( "<span><mt:trans phrase="'description' to description" component="HTMLImporter"></span>" );
        } else {
            $('#html_meta_description-text').html( "<span><mt:trans phrase="'description' to excerpt" component="HTMLImporter"></span>" );
        }
    }
    if ( settings.keywords == true ) {
        $('#html_meta_keywords-label').show();
        show_meta = true;
    } else {
        $('#html_meta_keywords-label').hide();
    }
    if ( show_meta == false ) {
        $('#html_meta-wrapper').hide();
    } else {
        $('#html_meta-wrapper').show();
    }
    if ( settings.text_format == true ) {
        $('#html_text_format-wrapper').show();
    } else {
        $('#html_text_format-wrapper').hide();
    }
    if ( selectedModel == 'entry' || selectedModel == 'page' ) {
        $('#html_create_categories-label').show();
    } else {
        $('#html_create_categories-label').hide();
    }
    if ( settings.has_assets ) {
        $('#html_meta_ogimage-label').show();
    } else {
        $('#html_meta_ogimage-label').hide();
    }
}
$('#html_title_option-wrapper').hide();
$('#html_import_assets').change(function(){
    if ( $(this).prop('checked') ) {
        $('#html_asset_exts-wrapper').show();
        $('#html_asset_exts').focus();
    } else {
        $('#html_asset_exts-wrapper').hide();
    }
});
$('input[name=html_title_perttern]').change(function(){
    $('#html_remove_title-wrapper').show();
    if ( $(this).val() == 'heading' ) {
        $('#html_title_option-wrapper').hide();
    } else {
        $('#html_title_option-wrapper').show();
        if ( $(this).val() == 'regex' ) {
            $('#html_title_option-label').html( '<span><mt:trans phrase="Pattern" component="HTMLImporter"></span>' );
            $('#html_title_option-hint').html( "<span><mt:trans phrase="Specify the range to be extracted with ()." component="HTMLImporter"> <mt:trans phrase="You can use template tags. Branching is possible with the template variable 'url' or 'html'." component="HTMLImporter"></span>" );
        } else if ( $(this).val() == 'start_end' ) {
            $('#html_title_option-label').html( '<span><mt:trans phrase="Start and End" component="HTMLImporter"></span>' );
            $('#html_title_option-hint').html( "<span><mt:trans phrase="Enter the start and end points separated by comma." component="HTMLImporter"> <mt:trans phrase="You can use template tags. Branching is possible with the template variable 'url' or 'html'." component="HTMLImporter"></span>" );
        } else if ( $(this).val() == 'title' ) {
            $('#html_title_option-label').html( '<span><mt:trans phrase="Separator" component="HTMLImporter"></span>' );
            $('#html_title_option-hint').html( "<span><mt:trans phrase="If you enter it, the text before this character will be the title." component="HTMLImporter"> <mt:trans phrase="You can specify multiple options by separating them with commas." component="HTMLImporter"> <mt:trans phrase="You can use template tags. Branching is possible with the template variable 'url' or 'html'." component="HTMLImporter"></span>" );
            $('#html_remove_title-wrapper').hide();
        } else if ( $(this).val() == 'xpath' ) {
            $('#html_title_option-label').html( '<span><mt:trans phrase="XPath" component="HTMLImporter"></span>' );
            $('#html_title_option-hint').html( "<span><mt:trans phrase="Specify the XPath. ex. /html/body/h1" component="HTMLImporter"> <mt:trans phrase="You can use template tags. Branching is possible with the template variable 'url' or 'html'." component="HTMLImporter"></span>" );
        } else if ( $(this).val() == 'css' ) {
            $('#html_title_option-label').html( '<span><mt:trans phrase="CSS Selector" component="HTMLImporter"></span>' );
            $('#html_title_option-hint').html( "<span><mt:trans phrase="CSS Selector. ex. h1" component="HTMLImporter"> <mt:trans phrase="You can use template tags. Branching is possible with the template variable 'url' or 'html'." component="HTMLImporter"></span>" );
        }
    }
});
$('input[name=html_body_perttern]').change(function(){
    if ( $(this).val() == 'regex' ) {
        $('#html_body_option-wrapper').show();
        $('#html_body_option').focus();
        $('#html_body_option-label').html( '<span><mt:trans phrase="Pattern" component="HTMLImporter"></span>' );
        $('#html_body_option-hint').html( "<span><mt:trans phrase="Specify the range to be extracted with ()." component="HTMLImporter"> <mt:trans phrase="You can use template tags. Branching is possible with the template variable 'url' or 'html'." component="HTMLImporter"></span>" );
    } else if ( $(this).val() == 'start_end' ) {
        $('#html_body_option-wrapper').show();
        $('#html_body_option').focus();
        $('#html_body_option-label').html( '<span><mt:trans phrase="Start and End" component="HTMLImporter"></span>' );
        $('#html_body_option-hint').html( "<span><mt:trans phrase="Enter the start and end points separated by comma." component="HTMLImporter"> <mt:trans phrase="You can use template tags. Branching is possible with the template variable 'url' or 'html'." component="HTMLImporter"></span>" );
    } else if ( $(this).val() == 'xpath' ) {
        $('#html_body_option-wrapper').show();
        $('#html_body_option').focus();
        $('#html_body_option-label').html( '<span><mt:trans phrase="XPath" component="HTMLImporter"></span>' );
        $('#html_body_option-hint').html( "<span><mt:trans phrase="Specify the XPath. ex. /html/body/main" component="HTMLImporter"> <mt:trans phrase="You can use template tags. Branching is possible with the template variable 'url' or 'html'." component="HTMLImporter"></span>" );
    } else if ( $(this).val() == 'css' ) {
        $('#html_body_option-wrapper').show();
        $('#html_body_option').focus();
        $('#html_body_option-label').html( '<span><mt:trans phrase="CSS Selectors" component="HTMLImporter"></span>' );
        $('#html_body_option-hint').html( "<span><mt:trans phrase="CSS Selectors separated by comma. ex. #main_content" component="HTMLImporter"> <mt:trans phrase="You can use template tags. Branching is possible with the template variable 'url' or 'html'." component="HTMLImporter"></span>" );
    } else if ( $(this).val() == 'auto' ) {
        $('#html_body_option-wrapper').hide();
    } else if ( $(this).val() == 'all_html' ) {
        $('#html_body_option-wrapper').hide();
    }
});
$('#html_importer_send_urls-button').click(function(){
    var urls = $('#html_importer_send_urls').val();
    var workspace_id = '<mt:var name="workspace_id">';
    if (! workspace_id ) {
        workspace_id = 0;
    }
    var model = $('input[name=import_model]:checked').val();
    $.post("<mt:var name="script_uri">", {
        __mode: 'html_importer_send_urls',
        magic_token: '<mt:var name="magic_token">',
        workspace_id : workspace_id,
        import_model : model,
        urls: urls
    },
    function ( data ) {
        var message = data.message;
        if ( data.status !== 200 ) {
            if (! message ) {
                message = '<mt:trans phrase="An error occurred while sending the URLs." component="HTMLImporter">';
            }
            alert( message );
            return;
        }
        $('#upload-file-magic').val( data.session_id );
        $('#save').removeClass( 'disabled' );
        $('#save').prop( 'disabled', false );
        $('#urls-alert-message').html( '<span>' + message + '</span>' );
        $('#upload-urls').show();
        $('#upload-urls').focus();
        $('#html_importer_send_urls-button').attr('disabled', true);
    },
    "json"
    );
});
$('#import_format').change(function(){
    if ( $(this).val() == 'html' ) {
        let current_model = $('input[name="import_model"]:checked').val();
        html_importer_get_settings( current_model );
        if ( current_select != 'html' && $("#save").prop("disabled") == false ) {
            if (! window.confirm( '<mt:trans phrase="Files already uploaded will be discarded." component="HTMLImporter"> <mt:trans phrase="Are you sure you want to change the settings?" component="HTMLImporter">' ) ) {
                $(this).val( current_select );
                cancel_select = true;
                return;
            }
        }
        if ( $('input[name="html_import_type"]:checked').val() == 'url' ) {
            $('#fileupload-wrapper').hide();
            $('.html_url-wrapper').show();
        } else {
            $('#fileupload-wrapper').show();
            $('.html_url-wrapper').hide();
        }
    } else {
        if ( current_select == 'html' && $("#save").prop("disabled") == false ) {
            if (! window.confirm( '<mt:trans phrase="URLs already sent will be discarded." component="HTMLImporter"> <mt:trans phrase="Are you sure you want to change the settings?" component="HTMLImporter">' ) ) {
                $(this).val( current_select );
                cancel_select = true;
                return;
            }
        }
        $('#fileupload-wrapper').show();
        if ( current_select == 'html' ) {
            $('#upload-file-magic').val('');
            $('#save').addClass('disabled');
            $("#save").prop("disabled", true);
        }
    }
});
function html_importer_get_settings ( import_model ) {
    let data = {
        model: import_model,
        workspace_id: '<mt:var name="workspace_id">',
        magic_token : '<mt:var name="magic_token">'
    };
    $.ajax({
        url: '<mt:var name="script_uri">?__mode=html_importer_get_settings',
        type: 'POST',
        data: JSON.stringify( data ),
        contentType: 'application/json',
        dataType: 'json',
        timeout: 5000,
        success: function( responce ){
            if ( responce.message ) {
                alert( responce.message );
            } else {
                $('#html_setting_selector').empty();
                $("<option>", {
                  value: '',
                  text: '<mt:trans phrase="(None selected)">'
                }).appendTo('#html_setting_selector');
                let settings = responce.settings;
                for (let i = 0; i < settings.length; i++) {
                    $("<option>", {
                      value: settings[i],
                      text: settings[i]
                    }).appendTo('#html_setting_selector');
                }
            }
        },
        error: function(){
            alert( '<mt:trans phrase="An error occurred while get settings." component="HTMLImporter">' );
        }
    });
}
var html_remember_ids = ['html_auth_user', 'html_auth_pwd', 'html_preprocessing', 'html_preprocessing_replace', 'html_title_option','html_body_option', 'html_field_settings', 'html_text_format', 'html_asset_exts', 'html_identifier'];
var html_remember_checkboxes = ['html_digest_auth', 'html_meta_description', 'html_meta_keywords', 'html_meta_tags', 'html_meta_ogimage', 'html_create_categories', 'html_overwrite_same', 'html_import_assets', 'html_remember_me', 'html_minifying_html', 'html_remove_title', 'html_create_report', 'html_js_to_asset', 'html_css_to_asset'];
var html_remember_radios = ['html_title_perttern', 'html_body_perttern', 'html_import_type'];
html_remember_ids.forEach(function( objId ) {
    var cookie_name = 'pt-html-import_' + objId;
    var value = $.cookie( cookie_name );
    if ( value ) {
        $('#' + objId ).val( value );
    }
});
html_remember_checkboxes.forEach(function( objId ) {
    var cookie_name = 'pt-html-import_' + objId;
    var value = $.cookie( cookie_name );
    if ( value ) {
        $('#' + objId ).prop( 'checked', true );
    }
    if ( objId == 'html_import_assets' && value ) {
        $('#html_asset_exts-wrapper').show();
    }
});
html_remember_radios.forEach(function( objName ) {
    var cookie_name = 'pt-html-import_' + objName;
    var value = $.cookie( cookie_name );
    if ( value ) {
        $('input[name='+ objName +']').val( [value] );
        if ( objName == 'html_title_perttern' ) {
            if ( value != 'heading' ) {
                $('#html_title_option-wrapper').show();
                if ( value == 'regex' ) {
                    $('#html_title_option-label').html( '<span><mt:trans phrase="Pattern" component="HTMLImporter"></span>' );
                    $('#html_title_option-hint').html( "<span><mt:trans phrase="Specify the range to be extracted with ()." component="HTMLImporter"> <mt:trans phrase="You can use template tags. Branching is possible with the template variable 'url' or 'html'." component="HTMLImporter"></span>" );
                } else if ( value == 'start_end' ) {
                    $('#html_title_option-label').html( '<span><mt:trans phrase="Start and End" component="HTMLImporter"></span>' );
                    $('#html_title_option-hint').html( "<span><mt:trans phrase="Enter the start and end points separated by comma." component="HTMLImporter"> <mt:trans phrase="You can use template tags. Branching is possible with the template variable 'url' or 'html'." component="HTMLImporter"></span>" );
                } else if ( value == 'title' ) {
                    $('#html_remove_title-wrapper').hide();
                    $('#html_title_option-label').html( '<span><mt:trans phrase="Separator" component="HTMLImporter"></span>' );
                    $('#html_title_option-hint').html( "<span><mt:trans phrase="If you enter it, the text before this character will be the title." component="HTMLImporter"> <mt:trans phrase="You can specify multiple options by separating them with commas." component="HTMLImporter"> <mt:trans phrase="You can use template tags. Branching is possible with the template variable 'url' or 'html'." component="HTMLImporter"></span>" );
                } else if ( value == 'xpath' ) {
                    $('#html_title_option-label').html( '<span><mt:trans phrase="XPath" component="HTMLImporter"></span>' );
                    $('#html_title_option-hint').html( "<span><mt:trans phrase="Specify the XPath. ex. /html/body/h1" component="HTMLImporter"> <mt:trans phrase="You can use template tags. Branching is possible with the template variable 'url' or 'html'." component="HTMLImporter"></span>" );
                } else if ( value == 'css' ) {
                    $('#html_title_option-label').html( '<span><mt:trans phrase="CSS Selector" component="HTMLImporter"></span>' );
                    $('#html_title_option-hint').html( "<span><mt:trans phrase="CSS Selector. ex. h1" component="HTMLImporter"> <mt:trans phrase="You can use template tags. Branching is possible with the template variable 'url' or 'html'." component="HTMLImporter"></span>" );
                }
            }
        } else if ( objName == 'html_body_perttern' ) {
            if ( value == 'regex' ) {
                $('#html_body_option-label').html( '<span><mt:trans phrase="Pattern" component="HTMLImporter"></span>' );
                $('#html_body_option-hint').html( "<span><mt:trans phrase="Specify the range to be extracted with ()." component="HTMLImporter"> <mt:trans phrase="You can use template tags. Branching is possible with the template variable 'url' or 'html'." component="HTMLImporter"></span>" );
            } else if ( value == 'start_end' ) {
                $('#html_body_option-label').html( '<span><mt:trans phrase="Start and End" component="HTMLImporter"></span>' );
                $('#html_body_option-hint').html( "<span><mt:trans phrase="Enter the start and end points separated by comma." component="HTMLImporter"> <mt:trans phrase="You can use template tags. Branching is possible with the template variable 'url' or 'html'." component="HTMLImporter"></span>" );
            } else if ( value == 'xpath' ) {
                $('#html_body_option-label').html( '<span><mt:trans phrase="XPath" component="HTMLImporter"></span>' );
                $('#html_body_option-hint').html( "<span><mt:trans phrase="Specify the XPath. ex. /html/body/main" component="HTMLImporter"> <mt:trans phrase="You can use template tags. Branching is possible with the template variable 'url' or 'html'." component="HTMLImporter"></span>" );
            } else if ( value == 'css' ) {
                $('#html_body_option-label').html( '<span><mt:trans phrase="CSS Selectors" component="HTMLImporter"></span>' );
                $('#html_body_option-hint').html( "<span><mt:trans phrase="CSS Selectors separated by comma. ex. #main_content" component="HTMLImporter"> <mt:trans phrase="You can use template tags. Branching is possible with the template variable 'url' or 'html'." component="HTMLImporter"></span>" );
            } else if ( value == 'auto' ) { 
                $('#html_body_option-wrapper').hide();
            } else if ( value == 'all_html' ) { 
                $('#html_body_option-wrapper').hide();
            }
        }
        if ( objName == 'html_import_type' ) {
            if ( value == 'url' ) {
                $('#fileupload-wrapper').hide();
                $('#zip-hint').hide();
                $('.html_url-wrapper').show();
            } else {
                $('#fileupload-wrapper').show();
                $('.html_url-wrapper').hide();
            }
        }
    }
});
if ( $('input[name="html_import_type"]:checked').val() == 'url' ) {
    $('#fileupload-wrapper').hide();
    $('.html_url-wrapper').show();
} else {
    $('#fileupload-wrapper').show();
    $('.html_url-wrapper').hide();
}
$('#import-form').submit(function(){
    if ( $('#html_remember_me').prop('checked') ) {
        html_remember_ids.forEach(function( objId ) {
            var value = $('#' + objId ).val();
            $.cookie( 'pt-html-import_' + objId , value, { expires: 365 });
        });
        html_remember_checkboxes.forEach(function( objId ) {
            if ( $('#' + objId ).prop('checked') ) {
                $.cookie( 'pt-html-import_' + objId , 1, { expires: 365 });
            } else {
                $.removeCookie( 'pt-html-import_' + objId );
            }
        });
        html_remember_radios.forEach(function( objName ) {
            var value = $('input[name='+ objName +']:checked').val();
            $.cookie( 'pt-html-import_' + objName , value, { expires: 365 });
        });
    }
    return true;
});
</script>