(function(){window.__mutationTranslate={config:{},dictionary:[],stand_by_num:0,num:0,addEvent:function(trigger,elements,func){if(!trigger||!elements||!func){return;}
if(trigger=='ready'){trigger='DOMContentLoaded';}
let add_event=function(element){element.addEventListener(trigger,func);}
if(elements.length){for(let i=0;i<elements.length;i++){add_event(elements[i]);}}else{add_event(elements);}},convertArray:function(objects){let arry=[];objects.forEach(function(obj){arry.push(obj);});return arry;},getAllTextNodes:function(nodes){let textNodes=[];nodes.forEach(function(node){if(node.nodeType==3){if((/\S/).test(node.nodeValue)&&!(node.parentNode&&(/script/i).test(node.parentNode.tagName) )){textNodes.push(node);}}else{let _textNodes=__mutationTranslate.getAllTextNodes(node.childNodes);if(_textNodes){_textNodes.forEach(function(_textNode){if((/\S/).test(_textNode.nodeValue)){textNodes.push(_textNode);}});}}});return textNodes.length?textNodes:false;},observe:{config:{childList:true,subtree:true,attributes:true,attributeFilter:['title','alt']},callback:function(mutations){if(!mutations.length){return;}
let __mt=__mutationTranslate;let newTextNodes=[];let newInnerHTMLs=[];let newAttrTags=[];mutations.forEach(function(mutation){let textNodes;if(mutation.type=='characterData'){textNodes=__mt.getAllTextNodes([mutation.target]);}else if(mutation.type=='childList'){if(!mutation.addedNodes.length){return;}
textNodes=__mt.getAllTextNodes(mutation.addedNodes);if(textNodes.length>=2){newInnerHTMLs.push({target:mutation.target});textNodes=false;}}else if(mutation.type=='attributes'){newAttrTags.push({target:mutation.target,attributeName:mutation.attributeName});}
if(textNodes){textNodes.forEach(function(textNode){newTextNodes.push(textNode);});}});if(newTextNodes.length){__mt.cue.create(newTextNodes);}
if(newInnerHTMLs.length){__mt.cue.create_html(newInnerHTMLs);}
if(newAttrTags.length){__mt.cue.create_attr(newAttrTags);}
__mt.trans();__mt.dictionaryUpdate();},create:function(element){let ob=__mutationTranslate.observe;let observerOptions=ob.config;let observerCallback=ob.callback;let observer;if(ob.observer){observer=ob.stop();}else{observer=new MutationObserver(observerCallback);}
observer.observe(element,observerOptions);__mutationTranslate.observe.observer=observer;__mutationTranslate.observe.target=element;},stop:function(){let ob=__mutationTranslate.observe;let observerOptions=ob.config;let observerCallback=ob.callback;let element=__mutationTranslate.observe.target;if(ob.observer){let mutations=ob.observer.takeRecords();ob.observer.disconnect();if(mutations){observerCallback(mutations);}}
return ob.observer;},resume:function(){let ob=__mutationTranslate.observe;let observerOptions=ob.config;let observerCallback=ob.callback;let element=__mutationTranslate.observe.target;if(ob.observer){ob.observer.observe(element,observerOptions);}
return ob.observer;}},cue:{nodes:[],attrs:[],htmls:[],create:function(newTextNodes){if(!newTextNodes){return false;}
let __mt=__mutationTranslate;let dictionary=__mt.dictionary;let texts=[];let nodes=[];newTextNodes.forEach(function(newTextNode){let text=newTextNode.textContent;let exist=false;dictionary.forEach(function(trans){if(trans.phrase==text){exist=true;}});if(!exist){__mutationTranslate.dictionary.push({phrase:text,translation:false});}
__mutationTranslate.cue.nodes.push({target:newTextNode,text:text});});return __mutationTranslate.cue.nodes;},create_html:function(newInnerHTMLs){if(!newInnerHTMLs||!newInnerHTMLs.length){return false;}
let __mt=__mutationTranslate;let dictionary=__mt.dictionary;let nodes=[];newInnerHTMLs.forEach(function(newInnerHTML){let tags=newInnerHTML.target.querySelectorAll('*');tags.forEach(function(tag){__mutationTranslate.num++;tag.setAttribute('data-_trid',__mutationTranslate.num);});let text=newInnerHTML.target.innerHTML;text=text.replace(/<script[\s\S]*?>[\s\S]*?<\/script>/gi,'');let stand_by_num=newInnerHTML.target.getAttribute('data-_tr_standby');let exist=false;dictionary.forEach(function(trans){if(trans.phrase==text){exist=true;}});if(!stand_by_num){__mutationTranslate.stand_by_num++;let stand_by_num=__mutationTranslate.stand_by_num;newInnerHTML.target.setAttribute('data-_tr_standby',stand_by_num);__mutationTranslate.cue.htmls.push({stand_by_num:stand_by_num,target:newInnerHTML.target,text:text});if(!exist){__mutationTranslate.dictionary.push({stand_by_num:stand_by_num,phrase:text,translation:false});}}else{let count_i=0;__mutationTranslate.cue.htmls.forEach(function(html,i){if(html.stand_by_num==stand_by_num){count_i=i;}});__mutationTranslate.cue.htmls.splice(count_i,1,{stand_by_num:stand_by_num,target:newInnerHTML.target,text:text});if(!exist){count_i=0;__mutationTranslate.dictionary.forEach(function(trans,i){if(trans.stand_by_num&&(trans.stand_by_num==stand_by_num)){count_i=i;};});__mutationTranslate.dictionary.splice(count_i,1,{stand_by_num:stand_by_num,phrase:text,translation:false});}}});return __mutationTranslate.cue.htmls;},create_attr:function(newAttrTags){if(!newAttrTags||!newAttrTags.length){return false;}
let __mt=__mutationTranslate;let dictionary=__mt.dictionary;let nodes=[];newAttrTags.forEach(function(newAttrTag){let text=newAttrTag.target.getAttribute(newAttrTag.attributeName);let exist=false;dictionary.forEach(function(trans){if(trans.phrase==text){exist=true;}});if(!exist){__mutationTranslate.dictionary.push({phrase:text,translation:false});}
__mutationTranslate.cue.attrs.push({target:newAttrTag,text:text});});return __mutationTranslate.cue.attrs;}},trans:function(){let __mt=__mutationTranslate;let ob=__mutationTranslate.observe;let dictionary=__mt.dictionary;ob.stop();(function(){let nodes=__mt.cue.nodes;let delete_reserve=[];nodes.forEach(function(node,i){if(!node.target.isConnected){delete_reserve.push(i);}else{let text=node.text;dictionary.forEach(function(trans){if(trans.phrase==text&&(trans.translation&&(/\S/).test(trans.translation))){node.target.replaceData(0,node.target.length,trans.translation);delete_reserve.push(i);}});}});let newNodes=nodes.filter(function(node,i){let match_delete=false;delete_reserve.forEach(function(reserve){if(reserve==i){match_delete=true;}});return match_delete?false:true;});__mutationTranslate.cue.nodes=newNodes;})();(function(){let htmls=__mt.cue.htmls;let delete_reserve=[];htmls.forEach(function(html,i){if(!html.target.isConnected){delete_reserve.push(i);}else{let text=html.text;dictionary.forEach(function(trans){if(trans.phrase==text&&(trans.translation&&(/\S/).test(trans.translation))){let tags=html.target.querySelectorAll('[data-_trid]');let dummy=document.createElement('div');dummy.innerHTML=trans.translation;let dummy_tags=dummy.querySelectorAll('[data-_trid]');__mt.convertArray(tags).forEach(function(tag){let _trid=tag.getAttribute('data-_trid');__mt.convertArray(dummy_tags).forEach(function(dummy_tag){let _trid_d=dummy_tag.getAttribute('data-_trid');if(_trid_d==_trid){dummy_tag.parentNode.insertBefore(tag,dummy_tag);if(tag.hasChildNodes()){__mt.convertArray(tag.childNodes).forEach(function(node){if(node.nodeType==3){node.parentNode.removeChild(node);}});__mt.convertArray(dummy_tag.childNodes).forEach(function(dummy_node){tag.appendChild(dummy_node)});}}});});__mt.convertArray(dummy_tags).forEach(function(dummy_tag){if(!dummy_tag.hasChildNodes()){dummy_tag.parentNode.removeChild(dummy_tag);}});__mt.convertArray(html.target.childNodes).forEach(function(node){if(node.nodeType==3){node.parentNode.removeChild(node);}});__mt.convertArray(dummy.childNodes).forEach(function(child){html.target.appendChild(child);});html.target.removeAttribute('data-_tr_standby');tags.forEach(function(tag){tag.removeAttribute('data-_trid');});delete_reserve.push(i);}});}});let newHTMLs=htmls.filter(function(html,i){let match_delete=false;delete_reserve.forEach(function(reserve){if(reserve==i){match_delete=true;}});return match_delete?false:true;});__mutationTranslate.cue.htmls=newHTMLs;})();(function(){let attrs=__mt.cue.attrs;let delete_reserve=[];attrs.forEach(function(attr,i){if(!attr.target.target.isConnected){delete_reserve.push(i);}else{let text=attr.text;dictionary.forEach(function(trans){if(trans.phrase==text&&(trans.translation&&(/\S/).test(trans.translation))){attr.target.target.setAttribute(attr.target.attributeName,trans.translation);;delete_reserve.push(i);}});}});let newAttrs=attrs.filter(function(attr,i){let match_delete=false;delete_reserve.forEach(function(reserve){if(reserve==i){match_delete=true;}});return match_delete?false:true;});__mutationTranslate.cue.attrs=newAttrs;})();ob.resume();},dictionaryUpdate:function(){if(!window.__mutationTranslate_config){return;}
let __mt_config=window.__mutationTranslate_config;let __mt=__mutationTranslate;let dictionary=__mt.dictionary;let _dictionary=dictionary.filter(function(trans,i){return!trans.translation?true:false;});if(!_dictionary.length){return;}
let sendMTRequest=function(options){let url=options.url;let data=options.data;let success=options.success;let error=options.error;let xhr=new XMLHttpRequest();xhr.open('POST',url );xhr.setRequestHeader("Content-Type","application/json");xhr.onload=function(){if(xhr.readyState==4&&xhr.status==200){success(xhr.responseText);}else{error(xhr);}};xhr.onerror=function(){error(xhr);}
xhr.send(data );}
let requestData={data:[],pt_mt_from:__mt_config.from,pt_mt_language:__mt_config.to,baseUrl:location.href};_dictionary.forEach(function(trans,i){requestData.data.push(trans.phrase);});let jsonData=JSON.stringify(requestData);sendMTRequest({url:__mt_config.api,data:jsonData,success:function(data){if(!data){return;}
let jsonObj=JSON.parse(data);if(!jsonObj.translations||!jsonObj.translations.length){return;}
let __mt=__mutationTranslate;let dictionary=__mt.dictionary;let dictionaryAdd=[];_dictionary.forEach(function(trans,i){dictionaryAdd.push({phrase:trans.phrase,translation:jsonObj.translations[i]});});let dictionaryNew=[];dictionary.forEach(function(trans,i){let transNew=false;if(!trans.translation){dictionaryAdd.forEach(function(_trans,j){if(trans.phrase==_trans.phrase){transNew=_trans;}});}
if(transNew){dictionaryNew.push(transNew);}else{dictionaryNew.push(trans);}});__mutationTranslate.dictionary=dictionaryNew;__mt.trans();},error:function(){}});}}
__mutationTranslate.addEvent('ready',document,function(){__mutationTranslate.observe.create(document.body);});})();